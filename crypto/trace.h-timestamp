/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_CRYPTO_GENERATED_TRACERS_H
#define TRACE_CRYPTO_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_QCRYPTO_TLS_CREDS_LOAD_DH_EVENT;
extern TraceEvent _TRACE_QCRYPTO_TLS_CREDS_GET_PATH_EVENT;
extern TraceEvent _TRACE_QCRYPTO_TLS_CREDS_ANON_LOAD_EVENT;
extern TraceEvent _TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_EVENT;
extern TraceEvent _TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_BASIC_CONSTRAINTS_EVENT;
extern TraceEvent _TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_USAGE_EVENT;
extern TraceEvent _TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_PURPOSE_EVENT;
extern TraceEvent _TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT_EVENT;
extern TraceEvent _TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT_LIST_EVENT;
extern TraceEvent _TRACE_QCRYPTO_TLS_SESSION_NEW_EVENT;
extern TraceEvent _TRACE_QCRYPTO_TLS_SESSION_CHECK_CREDS_EVENT;
extern uint16_t _TRACE_QCRYPTO_TLS_CREDS_LOAD_DH_DSTATE;
extern uint16_t _TRACE_QCRYPTO_TLS_CREDS_GET_PATH_DSTATE;
extern uint16_t _TRACE_QCRYPTO_TLS_CREDS_ANON_LOAD_DSTATE;
extern uint16_t _TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_DSTATE;
extern uint16_t _TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_BASIC_CONSTRAINTS_DSTATE;
extern uint16_t _TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_USAGE_DSTATE;
extern uint16_t _TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_PURPOSE_DSTATE;
extern uint16_t _TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT_DSTATE;
extern uint16_t _TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT_LIST_DSTATE;
extern uint16_t _TRACE_QCRYPTO_TLS_SESSION_NEW_DSTATE;
extern uint16_t _TRACE_QCRYPTO_TLS_SESSION_CHECK_CREDS_DSTATE;
#define TRACE_QCRYPTO_TLS_CREDS_LOAD_DH_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_GET_PATH_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_ANON_LOAD_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_BASIC_CONSTRAINTS_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_USAGE_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_PURPOSE_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT_LIST_ENABLED 1
#define TRACE_QCRYPTO_TLS_SESSION_NEW_ENABLED 1
#define TRACE_QCRYPTO_TLS_SESSION_CHECK_CREDS_ENABLED 1
#include "qemu/log.h"


static inline void trace_qcrypto_tls_creds_load_dh(void * creds, const char * filename)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_CREDS_LOAD_DH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_creds_load_dh " "TLS creds load DH creds=%p filename=%s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , creds, filename);
        }
    }
}

static inline void trace_qcrypto_tls_creds_get_path(void * creds, const char * filename, const char * path)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_CREDS_GET_PATH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_creds_get_path " "TLS creds path creds=%p filename=%s path=%s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , creds, filename, path);
        }
    }
}

static inline void trace_qcrypto_tls_creds_anon_load(void * creds, const char * dir)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_CREDS_ANON_LOAD)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_creds_anon_load " "TLS creds anon load creds=%p dir=%s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , creds, dir);
        }
    }
}

static inline void trace_qcrypto_tls_creds_x509_load(void * creds, const char * dir)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_CREDS_X509_LOAD)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_creds_x509_load " "TLS creds x509 load creds=%p dir=%s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , creds, dir);
        }
    }
}

static inline void trace_qcrypto_tls_creds_x509_check_basic_constraints(void * creds, const char * file, int status)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_BASIC_CONSTRAINTS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_creds_x509_check_basic_constraints " "TLS creds x509 check basic constraints creds=%p file=%s status=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , creds, file, status);
        }
    }
}

static inline void trace_qcrypto_tls_creds_x509_check_key_usage(void * creds, const char * file, int status, int usage, int critical)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_USAGE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_creds_x509_check_key_usage " "TLS creds x509 check key usage creds=%p file=%s status=%d usage=%d critical=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , creds, file, status, usage, critical);
        }
    }
}

static inline void trace_qcrypto_tls_creds_x509_check_key_purpose(void * creds, const char * file, int status, const char * usage, int critical)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_PURPOSE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_creds_x509_check_key_purpose " "TLS creds x509 check key usage creds=%p file=%s status=%d usage=%s critical=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , creds, file, status, usage, critical);
        }
    }
}

static inline void trace_qcrypto_tls_creds_x509_load_cert(void * creds, int isServer, const char * file)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_creds_x509_load_cert " "TLS creds x509 load cert creds=%p isServer=%d file=%s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , creds, isServer, file);
        }
    }
}

static inline void trace_qcrypto_tls_creds_x509_load_cert_list(void * creds, const char * file)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT_LIST)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_creds_x509_load_cert_list " "TLS creds x509 load cert list creds=%p file=%s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , creds, file);
        }
    }
}

static inline void trace_qcrypto_tls_session_new(void * session, void * creds, const char * hostname, const char * aclname, int endpoint)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_SESSION_NEW)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_session_new " "TLS session new session=%p creds=%p hostname=%s aclname=%s endpoint=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , session, creds, hostname, aclname, endpoint);
        }
    }
}

static inline void trace_qcrypto_tls_session_check_creds(void * session, const char * status)
{
    if (true) {
        if (trace_event_get_state(TRACE_QCRYPTO_TLS_SESSION_CHECK_CREDS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qcrypto_tls_session_check_creds " "TLS session check creds session=%p status=%s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , session, status);
        }
    }
}
#endif /* TRACE_CRYPTO_GENERATED_TRACERS_H */

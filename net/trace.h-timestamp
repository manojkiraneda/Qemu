/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_NET_GENERATED_TRACERS_H
#define TRACE_NET_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_VHOST_USER_EVENT_EVENT;
extern TraceEvent _TRACE_COLO_PROXY_MAIN_EVENT;
extern TraceEvent _TRACE_COLO_COMPARE_MAIN_EVENT;
extern TraceEvent _TRACE_COLO_COMPARE_UDP_MISCOMPARE_EVENT;
extern TraceEvent _TRACE_COLO_COMPARE_ICMP_MISCOMPARE_EVENT;
extern TraceEvent _TRACE_COLO_COMPARE_IP_INFO_EVENT;
extern TraceEvent _TRACE_COLO_OLD_PACKET_CHECK_FOUND_EVENT;
extern TraceEvent _TRACE_COLO_COMPARE_MISCOMPARE_EVENT;
extern TraceEvent _TRACE_COLO_COMPARE_PKT_INFO_SRC_EVENT;
extern TraceEvent _TRACE_COLO_COMPARE_PKT_INFO_DST_EVENT;
extern TraceEvent _TRACE_COLO_FILTER_REWRITER_DEBUG_EVENT;
extern TraceEvent _TRACE_COLO_FILTER_REWRITER_PKT_INFO_EVENT;
extern TraceEvent _TRACE_COLO_FILTER_REWRITER_CONN_OFFSET_EVENT;
extern uint16_t _TRACE_VHOST_USER_EVENT_DSTATE;
extern uint16_t _TRACE_COLO_PROXY_MAIN_DSTATE;
extern uint16_t _TRACE_COLO_COMPARE_MAIN_DSTATE;
extern uint16_t _TRACE_COLO_COMPARE_UDP_MISCOMPARE_DSTATE;
extern uint16_t _TRACE_COLO_COMPARE_ICMP_MISCOMPARE_DSTATE;
extern uint16_t _TRACE_COLO_COMPARE_IP_INFO_DSTATE;
extern uint16_t _TRACE_COLO_OLD_PACKET_CHECK_FOUND_DSTATE;
extern uint16_t _TRACE_COLO_COMPARE_MISCOMPARE_DSTATE;
extern uint16_t _TRACE_COLO_COMPARE_PKT_INFO_SRC_DSTATE;
extern uint16_t _TRACE_COLO_COMPARE_PKT_INFO_DST_DSTATE;
extern uint16_t _TRACE_COLO_FILTER_REWRITER_DEBUG_DSTATE;
extern uint16_t _TRACE_COLO_FILTER_REWRITER_PKT_INFO_DSTATE;
extern uint16_t _TRACE_COLO_FILTER_REWRITER_CONN_OFFSET_DSTATE;
#define TRACE_VHOST_USER_EVENT_ENABLED 1
#define TRACE_COLO_PROXY_MAIN_ENABLED 1
#define TRACE_COLO_COMPARE_MAIN_ENABLED 1
#define TRACE_COLO_COMPARE_UDP_MISCOMPARE_ENABLED 1
#define TRACE_COLO_COMPARE_ICMP_MISCOMPARE_ENABLED 1
#define TRACE_COLO_COMPARE_IP_INFO_ENABLED 1
#define TRACE_COLO_OLD_PACKET_CHECK_FOUND_ENABLED 1
#define TRACE_COLO_COMPARE_MISCOMPARE_ENABLED 1
#define TRACE_COLO_COMPARE_PKT_INFO_SRC_ENABLED 1
#define TRACE_COLO_COMPARE_PKT_INFO_DST_ENABLED 1
#define TRACE_COLO_FILTER_REWRITER_DEBUG_ENABLED 1
#define TRACE_COLO_FILTER_REWRITER_PKT_INFO_ENABLED 1
#define TRACE_COLO_FILTER_REWRITER_CONN_OFFSET_ENABLED 1
#include "qemu/log.h"


static inline void trace_vhost_user_event(const char * chr, int event)
{
    if (true) {
        if (trace_event_get_state(TRACE_VHOST_USER_EVENT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vhost_user_event " "chr: %s got event: %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , chr, event);
        }
    }
}

static inline void trace_colo_proxy_main(const char * chr)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_PROXY_MAIN)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_proxy_main " ": %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , chr);
        }
    }
}

static inline void trace_colo_compare_main(const char * chr)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_COMPARE_MAIN)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_compare_main " ": %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , chr);
        }
    }
}

static inline void trace_colo_compare_udp_miscompare(const char * sta, int size)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_COMPARE_UDP_MISCOMPARE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_compare_udp_miscompare " ": %s = %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , sta, size);
        }
    }
}

static inline void trace_colo_compare_icmp_miscompare(const char * sta, int size)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_COMPARE_ICMP_MISCOMPARE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_compare_icmp_miscompare " ": %s = %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , sta, size);
        }
    }
}

static inline void trace_colo_compare_ip_info(int psize, const char * sta, const char * stb, int ssize, const char * stc, const char * std)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_COMPARE_IP_INFO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_compare_ip_info " "ppkt size = %d, ip_src = %s, ip_dst = %s, spkt size = %d, ip_src = %s, ip_dst = %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , psize, sta, stb, ssize, stc, std);
        }
    }
}

static inline void trace_colo_old_packet_check_found(int64_t old_time)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_OLD_PACKET_CHECK_FOUND)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_old_packet_check_found " "%" PRId64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , old_time);
        }
    }
}

static inline void trace_colo_compare_miscompare(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_COMPARE_MISCOMPARE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_compare_miscompare " "" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_colo_compare_pkt_info_src(const char * src, uint32_t sseq, uint32_t sack, int res, uint32_t sflag, int ssize)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_COMPARE_PKT_INFO_SRC)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_compare_pkt_info_src " "src/dst: %s s: seq/ack=%u/%u res=%d flags=%x spkt_size: %d\n" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , src, sseq, sack, res, sflag, ssize);
        }
    }
}

static inline void trace_colo_compare_pkt_info_dst(const char * dst, uint32_t dseq, uint32_t dack, int res, uint32_t dflag, int dsize)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_COMPARE_PKT_INFO_DST)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_compare_pkt_info_dst " "src/dst: %s d: seq/ack=%u/%u res=%d flags=%x dpkt_size: %d\n" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , dst, dseq, dack, res, dflag, dsize);
        }
    }
}

static inline void trace_colo_filter_rewriter_debug(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_FILTER_REWRITER_DEBUG)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_filter_rewriter_debug " "" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_colo_filter_rewriter_pkt_info(const char * func, const char * src, const char * dst, uint32_t seq, uint32_t ack, uint32_t flag)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_FILTER_REWRITER_PKT_INFO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_filter_rewriter_pkt_info " "%s: src/dst: %s/%s p: seq/ack=%u/%u  flags=%x\n" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , func, src, dst, seq, ack, flag);
        }
    }
}

static inline void trace_colo_filter_rewriter_conn_offset(uint32_t offset)
{
    if (true) {
        if (trace_event_get_state(TRACE_COLO_FILTER_REWRITER_CONN_OFFSET)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:colo_filter_rewriter_conn_offset " ": offset=%u\n" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , offset);
        }
    }
}
#endif /* TRACE_NET_GENERATED_TRACERS_H */

/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_AUDIO_GENERATED_TRACERS_H
#define TRACE_AUDIO_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_ALSA_REVENTS_EVENT;
extern TraceEvent _TRACE_ALSA_POLLOUT_EVENT;
extern TraceEvent _TRACE_ALSA_SET_HANDLER_EVENT;
extern TraceEvent _TRACE_ALSA_WROTE_ZERO_EVENT;
extern TraceEvent _TRACE_ALSA_READ_ZERO_EVENT;
extern TraceEvent _TRACE_ALSA_XRUN_OUT_EVENT;
extern TraceEvent _TRACE_ALSA_XRUN_IN_EVENT;
extern TraceEvent _TRACE_ALSA_RESUME_OUT_EVENT;
extern TraceEvent _TRACE_ALSA_RESUME_IN_EVENT;
extern TraceEvent _TRACE_ALSA_NO_FRAMES_EVENT;
extern TraceEvent _TRACE_OSS_VERSION_EVENT;
extern TraceEvent _TRACE_OSS_INVALID_AVAILABLE_SIZE_EVENT;
extern uint16_t _TRACE_ALSA_REVENTS_DSTATE;
extern uint16_t _TRACE_ALSA_POLLOUT_DSTATE;
extern uint16_t _TRACE_ALSA_SET_HANDLER_DSTATE;
extern uint16_t _TRACE_ALSA_WROTE_ZERO_DSTATE;
extern uint16_t _TRACE_ALSA_READ_ZERO_DSTATE;
extern uint16_t _TRACE_ALSA_XRUN_OUT_DSTATE;
extern uint16_t _TRACE_ALSA_XRUN_IN_DSTATE;
extern uint16_t _TRACE_ALSA_RESUME_OUT_DSTATE;
extern uint16_t _TRACE_ALSA_RESUME_IN_DSTATE;
extern uint16_t _TRACE_ALSA_NO_FRAMES_DSTATE;
extern uint16_t _TRACE_OSS_VERSION_DSTATE;
extern uint16_t _TRACE_OSS_INVALID_AVAILABLE_SIZE_DSTATE;
#define TRACE_ALSA_REVENTS_ENABLED 1
#define TRACE_ALSA_POLLOUT_ENABLED 1
#define TRACE_ALSA_SET_HANDLER_ENABLED 1
#define TRACE_ALSA_WROTE_ZERO_ENABLED 1
#define TRACE_ALSA_READ_ZERO_ENABLED 1
#define TRACE_ALSA_XRUN_OUT_ENABLED 1
#define TRACE_ALSA_XRUN_IN_ENABLED 1
#define TRACE_ALSA_RESUME_OUT_ENABLED 1
#define TRACE_ALSA_RESUME_IN_ENABLED 1
#define TRACE_ALSA_NO_FRAMES_ENABLED 1
#define TRACE_OSS_VERSION_ENABLED 1
#define TRACE_OSS_INVALID_AVAILABLE_SIZE_ENABLED 1
#include "qemu/log.h"


static inline void trace_alsa_revents(int revents)
{
    if (true) {
        if (trace_event_get_state(TRACE_ALSA_REVENTS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:alsa_revents " "revents = %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , revents);
        }
    }
}

static inline void trace_alsa_pollout(int i, int fd)
{
    if (true) {
        if (trace_event_get_state(TRACE_ALSA_POLLOUT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:alsa_pollout " "i = %d fd = %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , i, fd);
        }
    }
}

static inline void trace_alsa_set_handler(int events, int index, int fd, int err)
{
    if (true) {
        if (trace_event_get_state(TRACE_ALSA_SET_HANDLER)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:alsa_set_handler " "events=%#x index=%d fd=%d err=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , events, index, fd, err);
        }
    }
}

static inline void trace_alsa_wrote_zero(int len)
{
    if (true) {
        if (trace_event_get_state(TRACE_ALSA_WROTE_ZERO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:alsa_wrote_zero " "Failed to write %d frames (wrote zero)" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , len);
        }
    }
}

static inline void trace_alsa_read_zero(long len)
{
    if (true) {
        if (trace_event_get_state(TRACE_ALSA_READ_ZERO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:alsa_read_zero " "Failed to read %ld frames (read zero)" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , len);
        }
    }
}

static inline void trace_alsa_xrun_out(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_ALSA_XRUN_OUT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:alsa_xrun_out " "Recovering from playback xrun" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_alsa_xrun_in(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_ALSA_XRUN_IN)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:alsa_xrun_in " "Recovering from capture xrun" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_alsa_resume_out(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_ALSA_RESUME_OUT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:alsa_resume_out " "Resuming suspended output stream" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_alsa_resume_in(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_ALSA_RESUME_IN)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:alsa_resume_in " "Resuming suspended input stream" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_alsa_no_frames(int state)
{
    if (true) {
        if (trace_event_get_state(TRACE_ALSA_NO_FRAMES)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:alsa_no_frames " "No frames available and ALSA state is %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , state);
        }
    }
}

static inline void trace_oss_version(int version)
{
    if (true) {
        if (trace_event_get_state(TRACE_OSS_VERSION)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:oss_version " "OSS version = %#x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , version);
        }
    }
}

static inline void trace_oss_invalid_available_size(int size, int bufsize)
{
    if (true) {
        if (trace_event_get_state(TRACE_OSS_INVALID_AVAILABLE_SIZE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:oss_invalid_available_size " "Invalid available size, size=%d bufsize=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , size, bufsize);
        }
    }
}
#endif /* TRACE_AUDIO_GENERATED_TRACERS_H */

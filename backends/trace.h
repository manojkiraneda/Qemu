/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_BACKENDS_GENERATED_TRACERS_H
#define TRACE_BACKENDS_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_WCT_INIT_EVENT;
extern TraceEvent _TRACE_WCT_CMD_RE_EVENT;
extern TraceEvent _TRACE_WCT_CMD_ST_EVENT;
extern TraceEvent _TRACE_WCT_CMD_SP_EVENT;
extern TraceEvent _TRACE_WCT_CMD_TS_EVENT;
extern TraceEvent _TRACE_WCT_CMD_OTHER_EVENT;
extern TraceEvent _TRACE_WCT_SPEED_EVENT;
extern uint16_t _TRACE_WCT_INIT_DSTATE;
extern uint16_t _TRACE_WCT_CMD_RE_DSTATE;
extern uint16_t _TRACE_WCT_CMD_ST_DSTATE;
extern uint16_t _TRACE_WCT_CMD_SP_DSTATE;
extern uint16_t _TRACE_WCT_CMD_TS_DSTATE;
extern uint16_t _TRACE_WCT_CMD_OTHER_DSTATE;
extern uint16_t _TRACE_WCT_SPEED_DSTATE;
#define TRACE_WCT_INIT_ENABLED 1
#define TRACE_WCT_CMD_RE_ENABLED 1
#define TRACE_WCT_CMD_ST_ENABLED 1
#define TRACE_WCT_CMD_SP_ENABLED 1
#define TRACE_WCT_CMD_TS_ENABLED 1
#define TRACE_WCT_CMD_OTHER_ENABLED 1
#define TRACE_WCT_SPEED_ENABLED 1
#include "qemu/log.h"


static inline void trace_wct_init(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_WCT_INIT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:wct_init " "" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_wct_cmd_re(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_WCT_CMD_RE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:wct_cmd_re " "" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_wct_cmd_st(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_WCT_CMD_ST)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:wct_cmd_st " "" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_wct_cmd_sp(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_WCT_CMD_SP)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:wct_cmd_sp " "" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_wct_cmd_ts(int input)
{
    if (true) {
        if (trace_event_get_state(TRACE_WCT_CMD_TS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:wct_cmd_ts " "0x%02x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , input);
        }
    }
}

static inline void trace_wct_cmd_other(const char * cmd)
{
    if (true) {
        if (trace_event_get_state(TRACE_WCT_CMD_OTHER)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:wct_cmd_other " "%s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cmd);
        }
    }
}

static inline void trace_wct_speed(int speed)
{
    if (true) {
        if (trace_event_get_state(TRACE_WCT_SPEED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:wct_speed " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , speed);
        }
    }
}
#endif /* TRACE_BACKENDS_GENERATED_TRACERS_H */

/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_S390X_GENERATED_TRACERS_H
#define TRACE_HW_S390X_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_CSS_ENABLE_FACILITY_EVENT;
extern TraceEvent _TRACE_CSS_CRW_EVENT;
extern TraceEvent _TRACE_CSS_CHPID_ADD_EVENT;
extern TraceEvent _TRACE_CSS_NEW_IMAGE_EVENT;
extern TraceEvent _TRACE_CSS_ASSIGN_SUBCH_EVENT;
extern TraceEvent _TRACE_CSS_IO_INTERRUPT_EVENT;
extern TraceEvent _TRACE_CSS_ADAPTER_INTERRUPT_EVENT;
extern TraceEvent _TRACE_VIRTIO_CCW_INTERPRET_CCW_EVENT;
extern TraceEvent _TRACE_VIRTIO_CCW_NEW_DEVICE_EVENT;
extern TraceEvent _TRACE_VIRTIO_CCW_SET_IND_EVENT;
extern uint16_t _TRACE_CSS_ENABLE_FACILITY_DSTATE;
extern uint16_t _TRACE_CSS_CRW_DSTATE;
extern uint16_t _TRACE_CSS_CHPID_ADD_DSTATE;
extern uint16_t _TRACE_CSS_NEW_IMAGE_DSTATE;
extern uint16_t _TRACE_CSS_ASSIGN_SUBCH_DSTATE;
extern uint16_t _TRACE_CSS_IO_INTERRUPT_DSTATE;
extern uint16_t _TRACE_CSS_ADAPTER_INTERRUPT_DSTATE;
extern uint16_t _TRACE_VIRTIO_CCW_INTERPRET_CCW_DSTATE;
extern uint16_t _TRACE_VIRTIO_CCW_NEW_DEVICE_DSTATE;
extern uint16_t _TRACE_VIRTIO_CCW_SET_IND_DSTATE;
#define TRACE_CSS_ENABLE_FACILITY_ENABLED 1
#define TRACE_CSS_CRW_ENABLED 1
#define TRACE_CSS_CHPID_ADD_ENABLED 1
#define TRACE_CSS_NEW_IMAGE_ENABLED 1
#define TRACE_CSS_ASSIGN_SUBCH_ENABLED 1
#define TRACE_CSS_IO_INTERRUPT_ENABLED 1
#define TRACE_CSS_ADAPTER_INTERRUPT_ENABLED 1
#define TRACE_VIRTIO_CCW_INTERPRET_CCW_ENABLED 1
#define TRACE_VIRTIO_CCW_NEW_DEVICE_ENABLED 1
#define TRACE_VIRTIO_CCW_SET_IND_ENABLED 1
#include "qemu/log.h"


static inline void trace_css_enable_facility(const char * facility)
{
    if (true) {
        if (trace_event_get_state(TRACE_CSS_ENABLE_FACILITY)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:css_enable_facility " "CSS: enable %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , facility);
        }
    }
}

static inline void trace_css_crw(uint8_t rsc, uint8_t erc, uint16_t rsid, const char * chained)
{
    if (true) {
        if (trace_event_get_state(TRACE_CSS_CRW)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:css_crw " "CSS: queueing crw: rsc=%x, erc=%x, rsid=%x %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , rsc, erc, rsid, chained);
        }
    }
}

static inline void trace_css_chpid_add(uint8_t cssid, uint8_t chpid, uint8_t type)
{
    if (true) {
        if (trace_event_get_state(TRACE_CSS_CHPID_ADD)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:css_chpid_add " "CSS: add chpid %x.%02x (type %02x)" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cssid, chpid, type);
        }
    }
}

static inline void trace_css_new_image(uint8_t cssid, const char * default_cssid)
{
    if (true) {
        if (trace_event_get_state(TRACE_CSS_NEW_IMAGE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:css_new_image " "CSS: add css image %02x %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cssid, default_cssid);
        }
    }
}

static inline void trace_css_assign_subch(const char * do_assign, uint8_t cssid, uint8_t ssid, uint16_t schid, uint16_t devno)
{
    if (true) {
        if (trace_event_get_state(TRACE_CSS_ASSIGN_SUBCH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:css_assign_subch " "CSS: %s %x.%x.%04x (devno %04x)" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , do_assign, cssid, ssid, schid, devno);
        }
    }
}

static inline void trace_css_io_interrupt(int cssid, int ssid, int schid, uint32_t intparm, uint8_t isc, const char * conditional)
{
    if (true) {
        if (trace_event_get_state(TRACE_CSS_IO_INTERRUPT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:css_io_interrupt " "CSS: I/O interrupt on sch %x.%x.%04x (intparm %08x, isc %x) %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cssid, ssid, schid, intparm, isc, conditional);
        }
    }
}

static inline void trace_css_adapter_interrupt(uint8_t isc)
{
    if (true) {
        if (trace_event_get_state(TRACE_CSS_ADAPTER_INTERRUPT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:css_adapter_interrupt " "CSS: adapter I/O interrupt (isc %x)" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , isc);
        }
    }
}

static inline void trace_virtio_ccw_interpret_ccw(int cssid, int ssid, int schid, int cmd_code)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_CCW_INTERPRET_CCW)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_ccw_interpret_ccw " "VIRTIO-CCW: %x.%x.%04x: interpret command %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cssid, ssid, schid, cmd_code);
        }
    }
}

static inline void trace_virtio_ccw_new_device(int cssid, int ssid, int schid, int devno, const char * devno_mode)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_CCW_NEW_DEVICE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_ccw_new_device " "VIRTIO-CCW: add subchannel %x.%x.%04x, devno %04x (%s)" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cssid, ssid, schid, devno, devno_mode);
        }
    }
}

static inline void trace_virtio_ccw_set_ind(uint64_t ind_loc, uint8_t ind_old, uint8_t ind_new)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_CCW_SET_IND)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_ccw_set_ind " "VIRTIO-CCW: indicator at %" PRIu64 ": %x->%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , ind_loc, ind_old, ind_new);
        }
    }
}
#endif /* TRACE_HW_S390X_GENERATED_TRACERS_H */

/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_ACPI_GENERATED_TRACERS_H
#define TRACE_HW_ACPI_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_MHP_ACPI_INVALID_SLOT_SELECTED_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_EJECTING_INVALID_SLOT_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_ADDR_LO_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_ADDR_HI_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_SIZE_LO_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_SIZE_HI_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_PXM_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_FLAGS_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_WRITE_SLOT_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_WRITE_OST_EV_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_WRITE_OST_STATUS_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_CLEAR_INSERT_EVT_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_CLEAR_REMOVE_EVT_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_PC_DIMM_DELETED_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_PC_DIMM_DELETE_FAILED_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_INVALID_IDX_SELECTED_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_READ_FLAGS_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_WRITE_IDX_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_WRITE_CMD_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_READ_CMD_DATA_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_CPU_HAS_EVENTS_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_CLEAR_INSERTING_EVT_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_CLEAR_REMOVE_EVT_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_EJECTING_INVALID_CPU_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_EJECTING_CPU_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_WRITE_OST_EV_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_WRITE_OST_STATUS_EVENT;
extern uint16_t _TRACE_MHP_ACPI_INVALID_SLOT_SELECTED_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_EJECTING_INVALID_SLOT_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_ADDR_LO_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_ADDR_HI_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_SIZE_LO_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_SIZE_HI_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_PXM_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_FLAGS_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_WRITE_SLOT_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_WRITE_OST_EV_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_WRITE_OST_STATUS_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_CLEAR_INSERT_EVT_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_CLEAR_REMOVE_EVT_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_PC_DIMM_DELETED_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_PC_DIMM_DELETE_FAILED_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_INVALID_IDX_SELECTED_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_READ_FLAGS_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_WRITE_IDX_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_WRITE_CMD_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_READ_CMD_DATA_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_CPU_HAS_EVENTS_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_CLEAR_INSERTING_EVT_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_CLEAR_REMOVE_EVT_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_EJECTING_INVALID_CPU_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_EJECTING_CPU_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_WRITE_OST_EV_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_WRITE_OST_STATUS_DSTATE;
#define TRACE_MHP_ACPI_INVALID_SLOT_SELECTED_ENABLED 1
#define TRACE_MHP_ACPI_EJECTING_INVALID_SLOT_ENABLED 1
#define TRACE_MHP_ACPI_READ_ADDR_LO_ENABLED 1
#define TRACE_MHP_ACPI_READ_ADDR_HI_ENABLED 1
#define TRACE_MHP_ACPI_READ_SIZE_LO_ENABLED 1
#define TRACE_MHP_ACPI_READ_SIZE_HI_ENABLED 1
#define TRACE_MHP_ACPI_READ_PXM_ENABLED 1
#define TRACE_MHP_ACPI_READ_FLAGS_ENABLED 1
#define TRACE_MHP_ACPI_WRITE_SLOT_ENABLED 1
#define TRACE_MHP_ACPI_WRITE_OST_EV_ENABLED 1
#define TRACE_MHP_ACPI_WRITE_OST_STATUS_ENABLED 1
#define TRACE_MHP_ACPI_CLEAR_INSERT_EVT_ENABLED 1
#define TRACE_MHP_ACPI_CLEAR_REMOVE_EVT_ENABLED 1
#define TRACE_MHP_ACPI_PC_DIMM_DELETED_ENABLED 1
#define TRACE_MHP_ACPI_PC_DIMM_DELETE_FAILED_ENABLED 1
#define TRACE_CPUHP_ACPI_INVALID_IDX_SELECTED_ENABLED 1
#define TRACE_CPUHP_ACPI_READ_FLAGS_ENABLED 1
#define TRACE_CPUHP_ACPI_WRITE_IDX_ENABLED 1
#define TRACE_CPUHP_ACPI_WRITE_CMD_ENABLED 1
#define TRACE_CPUHP_ACPI_READ_CMD_DATA_ENABLED 1
#define TRACE_CPUHP_ACPI_CPU_HAS_EVENTS_ENABLED 1
#define TRACE_CPUHP_ACPI_CLEAR_INSERTING_EVT_ENABLED 1
#define TRACE_CPUHP_ACPI_CLEAR_REMOVE_EVT_ENABLED 1
#define TRACE_CPUHP_ACPI_EJECTING_INVALID_CPU_ENABLED 1
#define TRACE_CPUHP_ACPI_EJECTING_CPU_ENABLED 1
#define TRACE_CPUHP_ACPI_WRITE_OST_EV_ENABLED 1
#define TRACE_CPUHP_ACPI_WRITE_OST_STATUS_ENABLED 1
#include "qemu/log.h"


static inline void trace_mhp_acpi_invalid_slot_selected(uint32_t slot)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_INVALID_SLOT_SELECTED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_invalid_slot_selected " "0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot);
        }
    }
}

static inline void trace_mhp_acpi_ejecting_invalid_slot(uint32_t slot)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_EJECTING_INVALID_SLOT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_ejecting_invalid_slot " "0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot);
        }
    }
}

static inline void trace_mhp_acpi_read_addr_lo(uint32_t slot, uint32_t addr)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_READ_ADDR_LO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_read_addr_lo " "slot[0x%"PRIx32"] addr lo: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot, addr);
        }
    }
}

static inline void trace_mhp_acpi_read_addr_hi(uint32_t slot, uint32_t addr)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_READ_ADDR_HI)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_read_addr_hi " "slot[0x%"PRIx32"] addr hi: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot, addr);
        }
    }
}

static inline void trace_mhp_acpi_read_size_lo(uint32_t slot, uint32_t size)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_READ_SIZE_LO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_read_size_lo " "slot[0x%"PRIx32"] size lo: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot, size);
        }
    }
}

static inline void trace_mhp_acpi_read_size_hi(uint32_t slot, uint32_t size)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_READ_SIZE_HI)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_read_size_hi " "slot[0x%"PRIx32"] size hi: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot, size);
        }
    }
}

static inline void trace_mhp_acpi_read_pxm(uint32_t slot, uint32_t pxm)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_READ_PXM)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_read_pxm " "slot[0x%"PRIx32"] proximity: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot, pxm);
        }
    }
}

static inline void trace_mhp_acpi_read_flags(uint32_t slot, uint32_t flags)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_READ_FLAGS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_read_flags " "slot[0x%"PRIx32"] flags: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot, flags);
        }
    }
}

static inline void trace_mhp_acpi_write_slot(uint32_t slot)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_WRITE_SLOT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_write_slot " "set active slot: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot);
        }
    }
}

static inline void trace_mhp_acpi_write_ost_ev(uint32_t slot, uint32_t ev)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_WRITE_OST_EV)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_write_ost_ev " "slot[0x%"PRIx32"] OST EVENT: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot, ev);
        }
    }
}

static inline void trace_mhp_acpi_write_ost_status(uint32_t slot, uint32_t st)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_WRITE_OST_STATUS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_write_ost_status " "slot[0x%"PRIx32"] OST STATUS: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot, st);
        }
    }
}

static inline void trace_mhp_acpi_clear_insert_evt(uint32_t slot)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_CLEAR_INSERT_EVT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_clear_insert_evt " "slot[0x%"PRIx32"] clear insert event" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot);
        }
    }
}

static inline void trace_mhp_acpi_clear_remove_evt(uint32_t slot)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_CLEAR_REMOVE_EVT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_clear_remove_evt " "slot[0x%"PRIx32"] clear remove event" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot);
        }
    }
}

static inline void trace_mhp_acpi_pc_dimm_deleted(uint32_t slot)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_PC_DIMM_DELETED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_pc_dimm_deleted " "slot[0x%"PRIx32"] pc-dimm deleted" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot);
        }
    }
}

static inline void trace_mhp_acpi_pc_dimm_delete_failed(uint32_t slot)
{
    if (true) {
        if (trace_event_get_state(TRACE_MHP_ACPI_PC_DIMM_DELETE_FAILED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:mhp_acpi_pc_dimm_delete_failed " "slot[0x%"PRIx32"] pc-dimm delete failed" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot);
        }
    }
}

static inline void trace_cpuhp_acpi_invalid_idx_selected(uint32_t idx)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_INVALID_IDX_SELECTED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_invalid_idx_selected " "0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , idx);
        }
    }
}

static inline void trace_cpuhp_acpi_read_flags(uint32_t idx, uint8_t flags)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_READ_FLAGS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_read_flags " "idx[0x%"PRIx32"] flags: 0x%"PRIx8 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , idx, flags);
        }
    }
}

static inline void trace_cpuhp_acpi_write_idx(uint32_t idx)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_WRITE_IDX)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_write_idx " "set active cpu idx: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , idx);
        }
    }
}

static inline void trace_cpuhp_acpi_write_cmd(uint32_t idx, uint8_t cmd)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_WRITE_CMD)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_write_cmd " "idx[0x%"PRIx32"] cmd: 0x%"PRIx8 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , idx, cmd);
        }
    }
}

static inline void trace_cpuhp_acpi_read_cmd_data(uint32_t idx, uint32_t data)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_READ_CMD_DATA)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_read_cmd_data " "idx[0x%"PRIx32"] data: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , idx, data);
        }
    }
}

static inline void trace_cpuhp_acpi_cpu_has_events(uint32_t idx, bool ins, bool rm)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_CPU_HAS_EVENTS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_cpu_has_events " "idx[0x%"PRIx32"] inserting: %d, removing: %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , idx, ins, rm);
        }
    }
}

static inline void trace_cpuhp_acpi_clear_inserting_evt(uint32_t idx)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_CLEAR_INSERTING_EVT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_clear_inserting_evt " "idx[0x%"PRIx32"]" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , idx);
        }
    }
}

static inline void trace_cpuhp_acpi_clear_remove_evt(uint32_t idx)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_CLEAR_REMOVE_EVT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_clear_remove_evt " "idx[0x%"PRIx32"]" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , idx);
        }
    }
}

static inline void trace_cpuhp_acpi_ejecting_invalid_cpu(uint32_t idx)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_EJECTING_INVALID_CPU)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_ejecting_invalid_cpu " "0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , idx);
        }
    }
}

static inline void trace_cpuhp_acpi_ejecting_cpu(uint32_t idx)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_EJECTING_CPU)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_ejecting_cpu " "0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , idx);
        }
    }
}

static inline void trace_cpuhp_acpi_write_ost_ev(uint32_t slot, uint32_t ev)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_WRITE_OST_EV)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_write_ost_ev " "idx[0x%"PRIx32"] OST EVENT: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot, ev);
        }
    }
}

static inline void trace_cpuhp_acpi_write_ost_status(uint32_t slot, uint32_t st)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPUHP_ACPI_WRITE_OST_STATUS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpuhp_acpi_write_ost_status " "idx[0x%"PRIx32"] OST STATUS: 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , slot, st);
        }
    }
}
#endif /* TRACE_HW_ACPI_GENERATED_TRACERS_H */

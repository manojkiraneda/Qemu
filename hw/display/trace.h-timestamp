/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_DISPLAY_GENERATED_TRACERS_H
#define TRACE_HW_DISPLAY_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_JAZZ_LED_READ_EVENT;
extern TraceEvent _TRACE_JAZZ_LED_WRITE_EVENT;
extern TraceEvent _TRACE_XENFB_MOUSE_EVENT_EVENT;
extern TraceEvent _TRACE_XENFB_INPUT_CONNECTED_EVENT;
extern TraceEvent _TRACE_G364FB_READ_EVENT;
extern TraceEvent _TRACE_G364FB_WRITE_EVENT;
extern TraceEvent _TRACE_MILKYMIST_TMU2_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_MILKYMIST_TMU2_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_MILKYMIST_TMU2_START_EVENT;
extern TraceEvent _TRACE_MILKYMIST_TMU2_PULSE_IRQ_EVENT;
extern TraceEvent _TRACE_MILKYMIST_VGAFB_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_MILKYMIST_VGAFB_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_VMWARE_VALUE_READ_EVENT;
extern TraceEvent _TRACE_VMWARE_VALUE_WRITE_EVENT;
extern TraceEvent _TRACE_VMWARE_PALETTE_READ_EVENT;
extern TraceEvent _TRACE_VMWARE_PALETTE_WRITE_EVENT;
extern TraceEvent _TRACE_VMWARE_SCRATCH_READ_EVENT;
extern TraceEvent _TRACE_VMWARE_SCRATCH_WRITE_EVENT;
extern TraceEvent _TRACE_VMWARE_SETMODE_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_FEATURES_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_GET_DISPLAY_INFO_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_SET_SCANOUT_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_RES_CREATE_2D_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_RES_CREATE_3D_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_RES_UNREF_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_RES_BACK_ATTACH_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_RES_BACK_DETACH_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_2D_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_3D_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_RES_XFER_FROMH_3D_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_RES_FLUSH_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_CTX_CREATE_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_CTX_DESTROY_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_CTX_RES_ATTACH_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_CTX_RES_DETACH_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_CMD_CTX_SUBMIT_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_UPDATE_CURSOR_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_FENCE_CTRL_EVENT;
extern TraceEvent _TRACE_VIRTIO_GPU_FENCE_RESP_EVENT;
extern TraceEvent _TRACE_QXL_INTERFACE_SET_MM_TIME_EVENT;
extern TraceEvent _TRACE_QXL_IO_WRITE_VGA_EVENT;
extern TraceEvent _TRACE_QXL_CREATE_GUEST_PRIMARY_EVENT;
extern TraceEvent _TRACE_QXL_CREATE_GUEST_PRIMARY_REST_EVENT;
extern TraceEvent _TRACE_QXL_DESTROY_PRIMARY_EVENT;
extern TraceEvent _TRACE_QXL_ENTER_VGA_MODE_EVENT;
extern TraceEvent _TRACE_QXL_EXIT_VGA_MODE_EVENT;
extern TraceEvent _TRACE_QXL_HARD_RESET_EVENT;
extern TraceEvent _TRACE_QXL_INTERFACE_ASYNC_COMPLETE_IO_EVENT;
extern TraceEvent _TRACE_QXL_INTERFACE_ATTACH_WORKER_EVENT;
extern TraceEvent _TRACE_QXL_INTERFACE_GET_INIT_INFO_EVENT;
extern TraceEvent _TRACE_QXL_INTERFACE_SET_COMPRESSION_LEVEL_EVENT;
extern TraceEvent _TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_EVENT;
extern TraceEvent _TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_REST_EVENT;
extern TraceEvent _TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_OVERFLOW_EVENT;
extern TraceEvent _TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_SCHEDULE_BH_EVENT;
extern TraceEvent _TRACE_QXL_IO_DESTROY_PRIMARY_IGNORED_EVENT;
extern TraceEvent _TRACE_QXL_IO_LOG_EVENT;
extern TraceEvent _TRACE_QXL_IO_READ_UNEXPECTED_EVENT;
extern TraceEvent _TRACE_QXL_IO_UNEXPECTED_VGA_MODE_EVENT;
extern TraceEvent _TRACE_QXL_IO_WRITE_EVENT;
extern TraceEvent _TRACE_QXL_MEMSLOT_ADD_GUEST_EVENT;
extern TraceEvent _TRACE_QXL_POST_LOAD_EVENT;
extern TraceEvent _TRACE_QXL_PRE_LOAD_EVENT;
extern TraceEvent _TRACE_QXL_PRE_SAVE_EVENT;
extern TraceEvent _TRACE_QXL_RESET_SURFACES_EVENT;
extern TraceEvent _TRACE_QXL_RING_COMMAND_CHECK_EVENT;
extern TraceEvent _TRACE_QXL_RING_COMMAND_GET_EVENT;
extern TraceEvent _TRACE_QXL_RING_COMMAND_REQ_NOTIFICATION_EVENT;
extern TraceEvent _TRACE_QXL_RING_CURSOR_CHECK_EVENT;
extern TraceEvent _TRACE_QXL_RING_CURSOR_GET_EVENT;
extern TraceEvent _TRACE_QXL_RING_CURSOR_REQ_NOTIFICATION_EVENT;
extern TraceEvent _TRACE_QXL_RING_RES_PUSH_EVENT;
extern TraceEvent _TRACE_QXL_RING_RES_PUSH_REST_EVENT;
extern TraceEvent _TRACE_QXL_RING_RES_PUT_EVENT;
extern TraceEvent _TRACE_QXL_SET_MODE_EVENT;
extern TraceEvent _TRACE_QXL_SOFT_RESET_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_DESTROY_SURFACES_COMPLETE_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_DESTROY_SURFACES_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_COMPLETE_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_FLUSH_SURFACES_ASYNC_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_MONITORS_CONFIG_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_LOADVM_COMMANDS_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_OOM_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_RESET_CURSOR_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_RESET_IMAGE_CACHE_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_RESET_MEMSLOTS_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_UPDATE_AREA_EVENT;
extern TraceEvent _TRACE_QXL_SPICE_UPDATE_AREA_REST_EVENT;
extern TraceEvent _TRACE_QXL_SURFACES_DIRTY_EVENT;
extern TraceEvent _TRACE_QXL_SEND_EVENTS_EVENT;
extern TraceEvent _TRACE_QXL_SEND_EVENTS_VM_STOPPED_EVENT;
extern TraceEvent _TRACE_QXL_SET_GUEST_BUG_EVENT;
extern TraceEvent _TRACE_QXL_INTERRUPT_CLIENT_MONITORS_CONFIG_EVENT;
extern TraceEvent _TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_GUEST_EVENT;
extern TraceEvent _TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_DEVICE_EVENT;
extern TraceEvent _TRACE_QXL_CLIENT_MONITORS_CONFIG_CAPPED_EVENT;
extern TraceEvent _TRACE_QXL_CLIENT_MONITORS_CONFIG_CRC_EVENT;
extern TraceEvent _TRACE_QXL_SET_CLIENT_CAPABILITIES_UNSUPPORTED_BY_REVISION_EVENT;
extern TraceEvent _TRACE_QXL_RENDER_BLIT_EVENT;
extern TraceEvent _TRACE_QXL_RENDER_GUEST_PRIMARY_RESIZED_EVENT;
extern TraceEvent _TRACE_QXL_RENDER_UPDATE_AREA_DONE_EVENT;
extern TraceEvent _TRACE_VGA_STD_READ_IO_EVENT;
extern TraceEvent _TRACE_VGA_STD_WRITE_IO_EVENT;
extern TraceEvent _TRACE_VGA_VBE_READ_EVENT;
extern TraceEvent _TRACE_VGA_VBE_WRITE_EVENT;
extern TraceEvent _TRACE_VGA_CIRRUS_READ_IO_EVENT;
extern TraceEvent _TRACE_VGA_CIRRUS_WRITE_IO_EVENT;
extern TraceEvent _TRACE_VGA_CIRRUS_READ_BLT_EVENT;
extern TraceEvent _TRACE_VGA_CIRRUS_WRITE_BLT_EVENT;
extern uint16_t _TRACE_JAZZ_LED_READ_DSTATE;
extern uint16_t _TRACE_JAZZ_LED_WRITE_DSTATE;
extern uint16_t _TRACE_XENFB_MOUSE_EVENT_DSTATE;
extern uint16_t _TRACE_XENFB_INPUT_CONNECTED_DSTATE;
extern uint16_t _TRACE_G364FB_READ_DSTATE;
extern uint16_t _TRACE_G364FB_WRITE_DSTATE;
extern uint16_t _TRACE_MILKYMIST_TMU2_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_MILKYMIST_TMU2_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_MILKYMIST_TMU2_START_DSTATE;
extern uint16_t _TRACE_MILKYMIST_TMU2_PULSE_IRQ_DSTATE;
extern uint16_t _TRACE_MILKYMIST_VGAFB_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_MILKYMIST_VGAFB_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_VMWARE_VALUE_READ_DSTATE;
extern uint16_t _TRACE_VMWARE_VALUE_WRITE_DSTATE;
extern uint16_t _TRACE_VMWARE_PALETTE_READ_DSTATE;
extern uint16_t _TRACE_VMWARE_PALETTE_WRITE_DSTATE;
extern uint16_t _TRACE_VMWARE_SCRATCH_READ_DSTATE;
extern uint16_t _TRACE_VMWARE_SCRATCH_WRITE_DSTATE;
extern uint16_t _TRACE_VMWARE_SETMODE_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_FEATURES_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_GET_DISPLAY_INFO_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_SET_SCANOUT_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_RES_CREATE_2D_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_RES_CREATE_3D_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_RES_UNREF_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_RES_BACK_ATTACH_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_RES_BACK_DETACH_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_2D_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_3D_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_RES_XFER_FROMH_3D_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_RES_FLUSH_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_CTX_CREATE_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_CTX_DESTROY_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_CTX_RES_ATTACH_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_CTX_RES_DETACH_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_CMD_CTX_SUBMIT_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_UPDATE_CURSOR_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_FENCE_CTRL_DSTATE;
extern uint16_t _TRACE_VIRTIO_GPU_FENCE_RESP_DSTATE;
extern uint16_t _TRACE_QXL_INTERFACE_SET_MM_TIME_DSTATE;
extern uint16_t _TRACE_QXL_IO_WRITE_VGA_DSTATE;
extern uint16_t _TRACE_QXL_CREATE_GUEST_PRIMARY_DSTATE;
extern uint16_t _TRACE_QXL_CREATE_GUEST_PRIMARY_REST_DSTATE;
extern uint16_t _TRACE_QXL_DESTROY_PRIMARY_DSTATE;
extern uint16_t _TRACE_QXL_ENTER_VGA_MODE_DSTATE;
extern uint16_t _TRACE_QXL_EXIT_VGA_MODE_DSTATE;
extern uint16_t _TRACE_QXL_HARD_RESET_DSTATE;
extern uint16_t _TRACE_QXL_INTERFACE_ASYNC_COMPLETE_IO_DSTATE;
extern uint16_t _TRACE_QXL_INTERFACE_ATTACH_WORKER_DSTATE;
extern uint16_t _TRACE_QXL_INTERFACE_GET_INIT_INFO_DSTATE;
extern uint16_t _TRACE_QXL_INTERFACE_SET_COMPRESSION_LEVEL_DSTATE;
extern uint16_t _TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_DSTATE;
extern uint16_t _TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_REST_DSTATE;
extern uint16_t _TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_OVERFLOW_DSTATE;
extern uint16_t _TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_SCHEDULE_BH_DSTATE;
extern uint16_t _TRACE_QXL_IO_DESTROY_PRIMARY_IGNORED_DSTATE;
extern uint16_t _TRACE_QXL_IO_LOG_DSTATE;
extern uint16_t _TRACE_QXL_IO_READ_UNEXPECTED_DSTATE;
extern uint16_t _TRACE_QXL_IO_UNEXPECTED_VGA_MODE_DSTATE;
extern uint16_t _TRACE_QXL_IO_WRITE_DSTATE;
extern uint16_t _TRACE_QXL_MEMSLOT_ADD_GUEST_DSTATE;
extern uint16_t _TRACE_QXL_POST_LOAD_DSTATE;
extern uint16_t _TRACE_QXL_PRE_LOAD_DSTATE;
extern uint16_t _TRACE_QXL_PRE_SAVE_DSTATE;
extern uint16_t _TRACE_QXL_RESET_SURFACES_DSTATE;
extern uint16_t _TRACE_QXL_RING_COMMAND_CHECK_DSTATE;
extern uint16_t _TRACE_QXL_RING_COMMAND_GET_DSTATE;
extern uint16_t _TRACE_QXL_RING_COMMAND_REQ_NOTIFICATION_DSTATE;
extern uint16_t _TRACE_QXL_RING_CURSOR_CHECK_DSTATE;
extern uint16_t _TRACE_QXL_RING_CURSOR_GET_DSTATE;
extern uint16_t _TRACE_QXL_RING_CURSOR_REQ_NOTIFICATION_DSTATE;
extern uint16_t _TRACE_QXL_RING_RES_PUSH_DSTATE;
extern uint16_t _TRACE_QXL_RING_RES_PUSH_REST_DSTATE;
extern uint16_t _TRACE_QXL_RING_RES_PUT_DSTATE;
extern uint16_t _TRACE_QXL_SET_MODE_DSTATE;
extern uint16_t _TRACE_QXL_SOFT_RESET_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_DESTROY_SURFACES_COMPLETE_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_DESTROY_SURFACES_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_COMPLETE_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_FLUSH_SURFACES_ASYNC_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_MONITORS_CONFIG_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_LOADVM_COMMANDS_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_OOM_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_RESET_CURSOR_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_RESET_IMAGE_CACHE_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_RESET_MEMSLOTS_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_UPDATE_AREA_DSTATE;
extern uint16_t _TRACE_QXL_SPICE_UPDATE_AREA_REST_DSTATE;
extern uint16_t _TRACE_QXL_SURFACES_DIRTY_DSTATE;
extern uint16_t _TRACE_QXL_SEND_EVENTS_DSTATE;
extern uint16_t _TRACE_QXL_SEND_EVENTS_VM_STOPPED_DSTATE;
extern uint16_t _TRACE_QXL_SET_GUEST_BUG_DSTATE;
extern uint16_t _TRACE_QXL_INTERRUPT_CLIENT_MONITORS_CONFIG_DSTATE;
extern uint16_t _TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_GUEST_DSTATE;
extern uint16_t _TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_DEVICE_DSTATE;
extern uint16_t _TRACE_QXL_CLIENT_MONITORS_CONFIG_CAPPED_DSTATE;
extern uint16_t _TRACE_QXL_CLIENT_MONITORS_CONFIG_CRC_DSTATE;
extern uint16_t _TRACE_QXL_SET_CLIENT_CAPABILITIES_UNSUPPORTED_BY_REVISION_DSTATE;
extern uint16_t _TRACE_QXL_RENDER_BLIT_DSTATE;
extern uint16_t _TRACE_QXL_RENDER_GUEST_PRIMARY_RESIZED_DSTATE;
extern uint16_t _TRACE_QXL_RENDER_UPDATE_AREA_DONE_DSTATE;
extern uint16_t _TRACE_VGA_STD_READ_IO_DSTATE;
extern uint16_t _TRACE_VGA_STD_WRITE_IO_DSTATE;
extern uint16_t _TRACE_VGA_VBE_READ_DSTATE;
extern uint16_t _TRACE_VGA_VBE_WRITE_DSTATE;
extern uint16_t _TRACE_VGA_CIRRUS_READ_IO_DSTATE;
extern uint16_t _TRACE_VGA_CIRRUS_WRITE_IO_DSTATE;
extern uint16_t _TRACE_VGA_CIRRUS_READ_BLT_DSTATE;
extern uint16_t _TRACE_VGA_CIRRUS_WRITE_BLT_DSTATE;
#define TRACE_JAZZ_LED_READ_ENABLED 1
#define TRACE_JAZZ_LED_WRITE_ENABLED 1
#define TRACE_XENFB_MOUSE_EVENT_ENABLED 1
#define TRACE_XENFB_INPUT_CONNECTED_ENABLED 1
#define TRACE_G364FB_READ_ENABLED 1
#define TRACE_G364FB_WRITE_ENABLED 1
#define TRACE_MILKYMIST_TMU2_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_TMU2_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_TMU2_START_ENABLED 1
#define TRACE_MILKYMIST_TMU2_PULSE_IRQ_ENABLED 1
#define TRACE_MILKYMIST_VGAFB_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_VGAFB_MEMORY_WRITE_ENABLED 1
#define TRACE_VMWARE_VALUE_READ_ENABLED 1
#define TRACE_VMWARE_VALUE_WRITE_ENABLED 1
#define TRACE_VMWARE_PALETTE_READ_ENABLED 1
#define TRACE_VMWARE_PALETTE_WRITE_ENABLED 1
#define TRACE_VMWARE_SCRATCH_READ_ENABLED 1
#define TRACE_VMWARE_SCRATCH_WRITE_ENABLED 1
#define TRACE_VMWARE_SETMODE_ENABLED 1
#define TRACE_VIRTIO_GPU_FEATURES_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_GET_DISPLAY_INFO_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_SET_SCANOUT_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_CREATE_2D_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_CREATE_3D_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_UNREF_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_BACK_ATTACH_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_BACK_DETACH_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_2D_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_3D_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_XFER_FROMH_3D_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_FLUSH_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_CTX_CREATE_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_CTX_DESTROY_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_CTX_RES_ATTACH_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_CTX_RES_DETACH_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_CTX_SUBMIT_ENABLED 1
#define TRACE_VIRTIO_GPU_UPDATE_CURSOR_ENABLED 1
#define TRACE_VIRTIO_GPU_FENCE_CTRL_ENABLED 1
#define TRACE_VIRTIO_GPU_FENCE_RESP_ENABLED 1
#define TRACE_QXL_INTERFACE_SET_MM_TIME_ENABLED 0
#define TRACE_QXL_IO_WRITE_VGA_ENABLED 0
#define TRACE_QXL_CREATE_GUEST_PRIMARY_ENABLED 1
#define TRACE_QXL_CREATE_GUEST_PRIMARY_REST_ENABLED 1
#define TRACE_QXL_DESTROY_PRIMARY_ENABLED 1
#define TRACE_QXL_ENTER_VGA_MODE_ENABLED 1
#define TRACE_QXL_EXIT_VGA_MODE_ENABLED 1
#define TRACE_QXL_HARD_RESET_ENABLED 1
#define TRACE_QXL_INTERFACE_ASYNC_COMPLETE_IO_ENABLED 1
#define TRACE_QXL_INTERFACE_ATTACH_WORKER_ENABLED 1
#define TRACE_QXL_INTERFACE_GET_INIT_INFO_ENABLED 1
#define TRACE_QXL_INTERFACE_SET_COMPRESSION_LEVEL_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_REST_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_OVERFLOW_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_SCHEDULE_BH_ENABLED 1
#define TRACE_QXL_IO_DESTROY_PRIMARY_IGNORED_ENABLED 1
#define TRACE_QXL_IO_LOG_ENABLED 1
#define TRACE_QXL_IO_READ_UNEXPECTED_ENABLED 1
#define TRACE_QXL_IO_UNEXPECTED_VGA_MODE_ENABLED 1
#define TRACE_QXL_IO_WRITE_ENABLED 1
#define TRACE_QXL_MEMSLOT_ADD_GUEST_ENABLED 1
#define TRACE_QXL_POST_LOAD_ENABLED 1
#define TRACE_QXL_PRE_LOAD_ENABLED 1
#define TRACE_QXL_PRE_SAVE_ENABLED 1
#define TRACE_QXL_RESET_SURFACES_ENABLED 1
#define TRACE_QXL_RING_COMMAND_CHECK_ENABLED 1
#define TRACE_QXL_RING_COMMAND_GET_ENABLED 1
#define TRACE_QXL_RING_COMMAND_REQ_NOTIFICATION_ENABLED 1
#define TRACE_QXL_RING_CURSOR_CHECK_ENABLED 1
#define TRACE_QXL_RING_CURSOR_GET_ENABLED 1
#define TRACE_QXL_RING_CURSOR_REQ_NOTIFICATION_ENABLED 1
#define TRACE_QXL_RING_RES_PUSH_ENABLED 1
#define TRACE_QXL_RING_RES_PUSH_REST_ENABLED 1
#define TRACE_QXL_RING_RES_PUT_ENABLED 1
#define TRACE_QXL_SET_MODE_ENABLED 1
#define TRACE_QXL_SOFT_RESET_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACES_COMPLETE_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACES_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_COMPLETE_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_ENABLED 1
#define TRACE_QXL_SPICE_FLUSH_SURFACES_ASYNC_ENABLED 1
#define TRACE_QXL_SPICE_MONITORS_CONFIG_ENABLED 1
#define TRACE_QXL_SPICE_LOADVM_COMMANDS_ENABLED 1
#define TRACE_QXL_SPICE_OOM_ENABLED 1
#define TRACE_QXL_SPICE_RESET_CURSOR_ENABLED 1
#define TRACE_QXL_SPICE_RESET_IMAGE_CACHE_ENABLED 1
#define TRACE_QXL_SPICE_RESET_MEMSLOTS_ENABLED 1
#define TRACE_QXL_SPICE_UPDATE_AREA_ENABLED 1
#define TRACE_QXL_SPICE_UPDATE_AREA_REST_ENABLED 1
#define TRACE_QXL_SURFACES_DIRTY_ENABLED 1
#define TRACE_QXL_SEND_EVENTS_ENABLED 1
#define TRACE_QXL_SEND_EVENTS_VM_STOPPED_ENABLED 1
#define TRACE_QXL_SET_GUEST_BUG_ENABLED 1
#define TRACE_QXL_INTERRUPT_CLIENT_MONITORS_CONFIG_ENABLED 1
#define TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_GUEST_ENABLED 1
#define TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_DEVICE_ENABLED 1
#define TRACE_QXL_CLIENT_MONITORS_CONFIG_CAPPED_ENABLED 1
#define TRACE_QXL_CLIENT_MONITORS_CONFIG_CRC_ENABLED 1
#define TRACE_QXL_SET_CLIENT_CAPABILITIES_UNSUPPORTED_BY_REVISION_ENABLED 1
#define TRACE_QXL_RENDER_BLIT_ENABLED 1
#define TRACE_QXL_RENDER_GUEST_PRIMARY_RESIZED_ENABLED 1
#define TRACE_QXL_RENDER_UPDATE_AREA_DONE_ENABLED 1
#define TRACE_VGA_STD_READ_IO_ENABLED 1
#define TRACE_VGA_STD_WRITE_IO_ENABLED 1
#define TRACE_VGA_VBE_READ_ENABLED 1
#define TRACE_VGA_VBE_WRITE_ENABLED 1
#define TRACE_VGA_CIRRUS_READ_IO_ENABLED 1
#define TRACE_VGA_CIRRUS_WRITE_IO_ENABLED 1
#define TRACE_VGA_CIRRUS_READ_BLT_ENABLED 1
#define TRACE_VGA_CIRRUS_WRITE_BLT_ENABLED 1
#include "qemu/log.h"


static inline void trace_jazz_led_read(uint64_t addr, uint8_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_JAZZ_LED_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:jazz_led_read " "read addr=0x%"PRIx64": 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_jazz_led_write(uint64_t addr, uint8_t new)
{
    if (true) {
        if (trace_event_get_state(TRACE_JAZZ_LED_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:jazz_led_write " "write addr=0x%"PRIx64": 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, new);
        }
    }
}

static inline void trace_xenfb_mouse_event(void * opaque, int dx, int dy, int dz, int button_state, int abs_pointer_wanted)
{
    if (true) {
        if (trace_event_get_state(TRACE_XENFB_MOUSE_EVENT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xenfb_mouse_event " "%p x %d y %d z %d bs %#x abs %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , opaque, dx, dy, dz, button_state, abs_pointer_wanted);
        }
    }
}

static inline void trace_xenfb_input_connected(void * xendev, int abs_pointer_wanted)
{
    if (true) {
        if (trace_event_get_state(TRACE_XENFB_INPUT_CONNECTED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xenfb_input_connected " "%p abs %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , xendev, abs_pointer_wanted);
        }
    }
}

static inline void trace_g364fb_read(uint64_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_G364FB_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:g364fb_read " "read addr=0x%"PRIx64": 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_g364fb_write(uint64_t addr, uint32_t new)
{
    if (true) {
        if (trace_event_get_state(TRACE_G364FB_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:g364fb_write " "write addr=0x%"PRIx64": 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, new);
        }
    }
}

static inline void trace_milkymist_tmu2_memory_read(uint32_t addr, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_TMU2_MEMORY_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_tmu2_memory_read " "addr %08x value %08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, value);
        }
    }
}

static inline void trace_milkymist_tmu2_memory_write(uint32_t addr, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_TMU2_MEMORY_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_tmu2_memory_write " "addr %08x value %08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, value);
        }
    }
}

static inline void trace_milkymist_tmu2_start(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_TMU2_START)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_tmu2_start " "Start TMU" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_milkymist_tmu2_pulse_irq(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_TMU2_PULSE_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_tmu2_pulse_irq " "Pulse IRQ" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_milkymist_vgafb_memory_read(uint32_t addr, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_VGAFB_MEMORY_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_vgafb_memory_read " "addr %08x value %08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, value);
        }
    }
}

static inline void trace_milkymist_vgafb_memory_write(uint32_t addr, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_VGAFB_MEMORY_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_vgafb_memory_write " "addr %08x value %08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, value);
        }
    }
}

static inline void trace_vmware_value_read(uint32_t index, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_VMWARE_VALUE_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vmware_value_read " "index %d, value 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , index, value);
        }
    }
}

static inline void trace_vmware_value_write(uint32_t index, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_VMWARE_VALUE_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vmware_value_write " "index %d, value 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , index, value);
        }
    }
}

static inline void trace_vmware_palette_read(uint32_t index, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_VMWARE_PALETTE_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vmware_palette_read " "index %d, value 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , index, value);
        }
    }
}

static inline void trace_vmware_palette_write(uint32_t index, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_VMWARE_PALETTE_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vmware_palette_write " "index %d, value 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , index, value);
        }
    }
}

static inline void trace_vmware_scratch_read(uint32_t index, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_VMWARE_SCRATCH_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vmware_scratch_read " "index %d, value 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , index, value);
        }
    }
}

static inline void trace_vmware_scratch_write(uint32_t index, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_VMWARE_SCRATCH_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vmware_scratch_write " "index %d, value 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , index, value);
        }
    }
}

static inline void trace_vmware_setmode(uint32_t w, uint32_t h, uint32_t bpp)
{
    if (true) {
        if (trace_event_get_state(TRACE_VMWARE_SETMODE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vmware_setmode " "%dx%d @ %d bpp" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , w, h, bpp);
        }
    }
}

static inline void trace_virtio_gpu_features(bool virgl)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_FEATURES)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_features " "virgl %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , virgl);
        }
    }
}

static inline void trace_virtio_gpu_cmd_get_display_info(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_GET_DISPLAY_INFO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_get_display_info " "" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_virtio_gpu_cmd_set_scanout(uint32_t id, uint32_t res, uint32_t w, uint32_t h, uint32_t x, uint32_t y)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_SET_SCANOUT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_set_scanout " "id %d, res 0x%x, w %d, h %d, x %d, y %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , id, res, w, h, x, y);
        }
    }
}

static inline void trace_virtio_gpu_cmd_res_create_2d(uint32_t res, uint32_t fmt, uint32_t w, uint32_t h)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_RES_CREATE_2D)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_res_create_2d " "res 0x%x, fmt 0x%x, w %d, h %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , res, fmt, w, h);
        }
    }
}

static inline void trace_virtio_gpu_cmd_res_create_3d(uint32_t res, uint32_t fmt, uint32_t w, uint32_t h, uint32_t d)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_RES_CREATE_3D)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_res_create_3d " "res 0x%x, fmt 0x%x, w %d, h %d, d %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , res, fmt, w, h, d);
        }
    }
}

static inline void trace_virtio_gpu_cmd_res_unref(uint32_t res)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_RES_UNREF)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_res_unref " "res 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , res);
        }
    }
}

static inline void trace_virtio_gpu_cmd_res_back_attach(uint32_t res)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_RES_BACK_ATTACH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_res_back_attach " "res 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , res);
        }
    }
}

static inline void trace_virtio_gpu_cmd_res_back_detach(uint32_t res)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_RES_BACK_DETACH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_res_back_detach " "res 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , res);
        }
    }
}

static inline void trace_virtio_gpu_cmd_res_xfer_toh_2d(uint32_t res)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_2D)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_res_xfer_toh_2d " "res 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , res);
        }
    }
}

static inline void trace_virtio_gpu_cmd_res_xfer_toh_3d(uint32_t res)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_3D)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_res_xfer_toh_3d " "res 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , res);
        }
    }
}

static inline void trace_virtio_gpu_cmd_res_xfer_fromh_3d(uint32_t res)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_RES_XFER_FROMH_3D)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_res_xfer_fromh_3d " "res 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , res);
        }
    }
}

static inline void trace_virtio_gpu_cmd_res_flush(uint32_t res, uint32_t w, uint32_t h, uint32_t x, uint32_t y)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_RES_FLUSH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_res_flush " "res 0x%x, w %d, h %d, x %d, y %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , res, w, h, x, y);
        }
    }
}

static inline void trace_virtio_gpu_cmd_ctx_create(uint32_t ctx, const char * name)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_CTX_CREATE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_ctx_create " "ctx 0x%x, name %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , ctx, name);
        }
    }
}

static inline void trace_virtio_gpu_cmd_ctx_destroy(uint32_t ctx)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_CTX_DESTROY)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_ctx_destroy " "ctx 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , ctx);
        }
    }
}

static inline void trace_virtio_gpu_cmd_ctx_res_attach(uint32_t ctx, uint32_t res)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_CTX_RES_ATTACH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_ctx_res_attach " "ctx 0x%x, res 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , ctx, res);
        }
    }
}

static inline void trace_virtio_gpu_cmd_ctx_res_detach(uint32_t ctx, uint32_t res)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_CTX_RES_DETACH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_ctx_res_detach " "ctx 0x%x, res 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , ctx, res);
        }
    }
}

static inline void trace_virtio_gpu_cmd_ctx_submit(uint32_t ctx, uint32_t size)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_CMD_CTX_SUBMIT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_cmd_ctx_submit " "ctx 0x%x, size %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , ctx, size);
        }
    }
}

static inline void trace_virtio_gpu_update_cursor(uint32_t scanout, uint32_t x, uint32_t y, const char * type, uint32_t res)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_UPDATE_CURSOR)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_update_cursor " "scanout %d, x %d, y %d, %s, res 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , scanout, x, y, type, res);
        }
    }
}

static inline void trace_virtio_gpu_fence_ctrl(uint64_t fence, uint32_t type)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_FENCE_CTRL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_fence_ctrl " "fence 0x%" PRIx64 ", type 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , fence, type);
        }
    }
}

static inline void trace_virtio_gpu_fence_resp(uint64_t fence)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_GPU_FENCE_RESP)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_gpu_fence_resp " "fence 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , fence);
        }
    }
}

static inline void trace_qxl_interface_set_mm_time(int qid, uint32_t mm_time)
{
    if (true) {
    }
}

static inline void trace_qxl_io_write_vga(int qid, const char * mode, uint32_t addr, uint32_t val)
{
    if (true) {
    }
}

static inline void trace_qxl_create_guest_primary(int qid, uint32_t width, uint32_t height, uint64_t mem, uint32_t format, uint32_t position)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_CREATE_GUEST_PRIMARY)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_create_guest_primary " "%d %ux%u mem=%" PRIx64 " %u,%u" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, width, height, mem, format, position);
        }
    }
}

static inline void trace_qxl_create_guest_primary_rest(int qid, int32_t stride, uint32_t type, uint32_t flags)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_CREATE_GUEST_PRIMARY_REST)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_create_guest_primary_rest " "%d %d,%d,%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, stride, type, flags);
        }
    }
}

static inline void trace_qxl_destroy_primary(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_DESTROY_PRIMARY)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_destroy_primary " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_enter_vga_mode(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_ENTER_VGA_MODE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_enter_vga_mode " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_exit_vga_mode(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_EXIT_VGA_MODE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_exit_vga_mode " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_hard_reset(int qid, int64_t loadvm)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_HARD_RESET)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_hard_reset " "%d loadvm=%"PRId64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, loadvm);
        }
    }
}

static inline void trace_qxl_interface_async_complete_io(int qid, uint32_t current_async, void * cookie)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_INTERFACE_ASYNC_COMPLETE_IO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_interface_async_complete_io " "%d current=%d cookie=%p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, current_async, cookie);
        }
    }
}

static inline void trace_qxl_interface_attach_worker(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_INTERFACE_ATTACH_WORKER)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_interface_attach_worker " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_interface_get_init_info(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_INTERFACE_GET_INIT_INFO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_interface_get_init_info " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_interface_set_compression_level(int qid, int64_t level)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_INTERFACE_SET_COMPRESSION_LEVEL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_interface_set_compression_level " "%d %"PRId64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, level);
        }
    }
}

static inline void trace_qxl_interface_update_area_complete(int qid, uint32_t surface_id, uint32_t dirty_left, uint32_t dirty_right, uint32_t dirty_top, uint32_t dirty_bottom)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_interface_update_area_complete " "%d surface=%d [%d,%d,%d,%d]" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, surface_id, dirty_left, dirty_right, dirty_top, dirty_bottom);
        }
    }
}

static inline void trace_qxl_interface_update_area_complete_rest(int qid, uint32_t num_updated_rects)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_REST)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_interface_update_area_complete_rest " "%d #=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, num_updated_rects);
        }
    }
}

static inline void trace_qxl_interface_update_area_complete_overflow(int qid, int max)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_OVERFLOW)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_interface_update_area_complete_overflow " "%d max=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, max);
        }
    }
}

static inline void trace_qxl_interface_update_area_complete_schedule_bh(int qid, uint32_t num_dirty)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_SCHEDULE_BH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_interface_update_area_complete_schedule_bh " "%d #dirty=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, num_dirty);
        }
    }
}

static inline void trace_qxl_io_destroy_primary_ignored(int qid, const char * mode)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_IO_DESTROY_PRIMARY_IGNORED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_io_destroy_primary_ignored " "%d %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, mode);
        }
    }
}

static inline void trace_qxl_io_log(int qid, const uint8_t * log_buf)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_IO_LOG)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_io_log " "%d %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, log_buf);
        }
    }
}

static inline void trace_qxl_io_read_unexpected(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_IO_READ_UNEXPECTED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_io_read_unexpected " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_io_unexpected_vga_mode(int qid, uint64_t addr, uint64_t val, const char * desc)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_IO_UNEXPECTED_VGA_MODE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_io_unexpected_vga_mode " "%d 0x%"PRIx64"=%"PRIu64" (%s)" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, addr, val, desc);
        }
    }
}

static inline void trace_qxl_io_write(int qid, const char * mode, uint64_t addr, const char * aname, uint64_t val, unsigned size, int async)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_IO_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_io_write " "%d %s addr=%"PRIu64 " (%s) val=%"PRIu64" size=%u async=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, mode, addr, aname, val, size, async);
        }
    }
}

static inline void trace_qxl_memslot_add_guest(int qid, uint32_t slot_id, uint64_t guest_start, uint64_t guest_end)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_MEMSLOT_ADD_GUEST)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_memslot_add_guest " "%d %u: guest phys 0x%"PRIx64 " - 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, slot_id, guest_start, guest_end);
        }
    }
}

static inline void trace_qxl_post_load(int qid, const char * mode)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_POST_LOAD)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_post_load " "%d %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, mode);
        }
    }
}

static inline void trace_qxl_pre_load(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_PRE_LOAD)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_pre_load " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_pre_save(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_PRE_SAVE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_pre_save " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_reset_surfaces(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RESET_SURFACES)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_reset_surfaces " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_ring_command_check(int qid, const char * mode)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RING_COMMAND_CHECK)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_ring_command_check " "%d %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, mode);
        }
    }
}

static inline void trace_qxl_ring_command_get(int qid, const char * mode)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RING_COMMAND_GET)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_ring_command_get " "%d %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, mode);
        }
    }
}

static inline void trace_qxl_ring_command_req_notification(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RING_COMMAND_REQ_NOTIFICATION)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_ring_command_req_notification " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_ring_cursor_check(int qid, const char * mode)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RING_CURSOR_CHECK)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_ring_cursor_check " "%d %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, mode);
        }
    }
}

static inline void trace_qxl_ring_cursor_get(int qid, const char * mode)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RING_CURSOR_GET)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_ring_cursor_get " "%d %s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, mode);
        }
    }
}

static inline void trace_qxl_ring_cursor_req_notification(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RING_CURSOR_REQ_NOTIFICATION)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_ring_cursor_req_notification " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_ring_res_push(int qid, const char * mode, uint32_t surface_count, uint32_t free_res, void * last_release, const char * notify)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RING_RES_PUSH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_ring_res_push " "%d %s s#=%d res#=%d last=%p notify=%s" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, mode, surface_count, free_res, last_release, notify);
        }
    }
}

static inline void trace_qxl_ring_res_push_rest(int qid, uint32_t ring_has, uint32_t ring_size, uint32_t prod, uint32_t cons)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RING_RES_PUSH_REST)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_ring_res_push_rest " "%d ring %d/%d [%d,%d]" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, ring_has, ring_size, prod, cons);
        }
    }
}

static inline void trace_qxl_ring_res_put(int qid, uint32_t free_res)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RING_RES_PUT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_ring_res_put " "%d #res=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, free_res);
        }
    }
}

static inline void trace_qxl_set_mode(int qid, int modenr, uint32_t x_res, uint32_t y_res, uint32_t bits, uint64_t devmem)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SET_MODE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_set_mode " "%d mode=%d [ x=%d y=%d @ bpp=%d devmem=0x%" PRIx64 " ]" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, modenr, x_res, y_res, bits, devmem);
        }
    }
}

static inline void trace_qxl_soft_reset(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SOFT_RESET)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_soft_reset " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_spice_destroy_surfaces_complete(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_DESTROY_SURFACES_COMPLETE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_destroy_surfaces_complete " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_spice_destroy_surfaces(int qid, int async)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_DESTROY_SURFACES)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_destroy_surfaces " "%d async=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, async);
        }
    }
}

static inline void trace_qxl_spice_destroy_surface_wait_complete(int qid, uint32_t id)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_COMPLETE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_destroy_surface_wait_complete " "%d sid=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, id);
        }
    }
}

static inline void trace_qxl_spice_destroy_surface_wait(int qid, uint32_t id, int async)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_destroy_surface_wait " "%d sid=%d async=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, id, async);
        }
    }
}

static inline void trace_qxl_spice_flush_surfaces_async(int qid, uint32_t surface_count, uint32_t num_free_res)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_FLUSH_SURFACES_ASYNC)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_flush_surfaces_async " "%d s#=%d, res#=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, surface_count, num_free_res);
        }
    }
}

static inline void trace_qxl_spice_monitors_config(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_MONITORS_CONFIG)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_monitors_config " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_spice_loadvm_commands(int qid, void * ext, uint32_t count)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_LOADVM_COMMANDS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_loadvm_commands " "%d ext=%p count=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, ext, count);
        }
    }
}

static inline void trace_qxl_spice_oom(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_OOM)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_oom " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_spice_reset_cursor(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_RESET_CURSOR)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_reset_cursor " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_spice_reset_image_cache(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_RESET_IMAGE_CACHE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_reset_image_cache " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_spice_reset_memslots(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_RESET_MEMSLOTS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_reset_memslots " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_spice_update_area(int qid, uint32_t surface_id, uint32_t left, uint32_t right, uint32_t top, uint32_t bottom)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_UPDATE_AREA)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_update_area " "%d sid=%d [%d,%d,%d,%d]" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, surface_id, left, right, top, bottom);
        }
    }
}

static inline void trace_qxl_spice_update_area_rest(int qid, uint32_t num_dirty_rects, uint32_t clear_dirty_region)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SPICE_UPDATE_AREA_REST)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_spice_update_area_rest " "%d #d=%d clear=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, num_dirty_rects, clear_dirty_region);
        }
    }
}

static inline void trace_qxl_surfaces_dirty(int qid, uint64_t offset, uint64_t size)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SURFACES_DIRTY)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_surfaces_dirty " "%d offset=0x%"PRIx64" size=0x%"PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, offset, size);
        }
    }
}

static inline void trace_qxl_send_events(int qid, uint32_t events)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SEND_EVENTS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_send_events " "%d %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, events);
        }
    }
}

static inline void trace_qxl_send_events_vm_stopped(int qid, uint32_t events)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SEND_EVENTS_VM_STOPPED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_send_events_vm_stopped " "%d %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, events);
        }
    }
}

static inline void trace_qxl_set_guest_bug(int qid)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SET_GUEST_BUG)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_set_guest_bug " "%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid);
        }
    }
}

static inline void trace_qxl_interrupt_client_monitors_config(int qid, int num_heads, void * heads)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_INTERRUPT_CLIENT_MONITORS_CONFIG)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_interrupt_client_monitors_config " "%d %d %p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, num_heads, heads);
        }
    }
}

static inline void trace_qxl_client_monitors_config_unsupported_by_guest(int qid, uint32_t int_mask, void * client_monitors_config)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_GUEST)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_client_monitors_config_unsupported_by_guest " "%d %X %p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, int_mask, client_monitors_config);
        }
    }
}

static inline void trace_qxl_client_monitors_config_unsupported_by_device(int qid, int revision)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_DEVICE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_client_monitors_config_unsupported_by_device " "%d revision=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, revision);
        }
    }
}

static inline void trace_qxl_client_monitors_config_capped(int qid, int requested, int limit)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_CLIENT_MONITORS_CONFIG_CAPPED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_client_monitors_config_capped " "%d %d %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, requested, limit);
        }
    }
}

static inline void trace_qxl_client_monitors_config_crc(int qid, unsigned size, uint32_t crc32)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_CLIENT_MONITORS_CONFIG_CRC)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_client_monitors_config_crc " "%d %u %u" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, size, crc32);
        }
    }
}

static inline void trace_qxl_set_client_capabilities_unsupported_by_revision(int qid, int revision)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_SET_CLIENT_CAPABILITIES_UNSUPPORTED_BY_REVISION)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_set_client_capabilities_unsupported_by_revision " "%d revision=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , qid, revision);
        }
    }
}

static inline void trace_qxl_render_blit(int32_t stride, int32_t left, int32_t right, int32_t top, int32_t bottom)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RENDER_BLIT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_render_blit " "stride=%d [%d, %d, %d, %d]" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , stride, left, right, top, bottom);
        }
    }
}

static inline void trace_qxl_render_guest_primary_resized(int32_t width, int32_t height, int32_t stride, int32_t bytes_pp, int32_t bits_pp)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RENDER_GUEST_PRIMARY_RESIZED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_render_guest_primary_resized " "%dx%d, stride %d, bpp %d, depth %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , width, height, stride, bytes_pp, bits_pp);
        }
    }
}

static inline void trace_qxl_render_update_area_done(void * cookie)
{
    if (true) {
        if (trace_event_get_state(TRACE_QXL_RENDER_UPDATE_AREA_DONE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:qxl_render_update_area_done " "%p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cookie);
        }
    }
}

static inline void trace_vga_std_read_io(uint32_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_VGA_STD_READ_IO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vga_std_read_io " "addr 0x%x, val 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_vga_std_write_io(uint32_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_VGA_STD_WRITE_IO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vga_std_write_io " "addr 0x%x, val 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_vga_vbe_read(uint32_t index, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_VGA_VBE_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vga_vbe_read " "index 0x%x, val 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , index, val);
        }
    }
}

static inline void trace_vga_vbe_write(uint32_t index, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_VGA_VBE_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vga_vbe_write " "index 0x%x, val 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , index, val);
        }
    }
}

static inline void trace_vga_cirrus_read_io(uint32_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_VGA_CIRRUS_READ_IO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vga_cirrus_read_io " "addr 0x%x, val 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_vga_cirrus_write_io(uint32_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_VGA_CIRRUS_WRITE_IO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vga_cirrus_write_io " "addr 0x%x, val 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_vga_cirrus_read_blt(uint32_t offset, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_VGA_CIRRUS_READ_BLT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vga_cirrus_read_blt " "offset 0x%x, val 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , offset, val);
        }
    }
}

static inline void trace_vga_cirrus_write_blt(uint32_t offset, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_VGA_CIRRUS_WRITE_BLT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:vga_cirrus_write_blt " "offset 0x%x, val 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , offset, val);
        }
    }
}
#endif /* TRACE_HW_DISPLAY_GENERATED_TRACERS_H */

/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_DMA_GENERATED_TRACERS_H
#define TRACE_HW_DMA_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_JAZZIO_READ_EVENT;
extern TraceEvent _TRACE_JAZZIO_WRITE_EVENT;
extern TraceEvent _TRACE_RC4030_READ_EVENT;
extern TraceEvent _TRACE_RC4030_WRITE_EVENT;
extern TraceEvent _TRACE_LEDMA_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_LEDMA_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_SPARC32_DMA_SET_IRQ_RAISE_EVENT;
extern TraceEvent _TRACE_SPARC32_DMA_SET_IRQ_LOWER_EVENT;
extern TraceEvent _TRACE_ESPDMA_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_ESPDMA_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_SPARC32_DMA_MEM_READL_EVENT;
extern TraceEvent _TRACE_SPARC32_DMA_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SPARC32_DMA_ENABLE_RAISE_EVENT;
extern TraceEvent _TRACE_SPARC32_DMA_ENABLE_LOWER_EVENT;
extern TraceEvent _TRACE_SUN4M_IOMMU_MEM_READL_EVENT;
extern TraceEvent _TRACE_SUN4M_IOMMU_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SUN4M_IOMMU_MEM_WRITEL_CTRL_EVENT;
extern TraceEvent _TRACE_SUN4M_IOMMU_MEM_WRITEL_TLBFLUSH_EVENT;
extern TraceEvent _TRACE_SUN4M_IOMMU_MEM_WRITEL_PGFLUSH_EVENT;
extern TraceEvent _TRACE_SUN4M_IOMMU_PAGE_GET_FLAGS_EVENT;
extern TraceEvent _TRACE_SUN4M_IOMMU_TRANSLATE_PA_EVENT;
extern TraceEvent _TRACE_SUN4M_IOMMU_BAD_ADDR_EVENT;
extern TraceEvent _TRACE_I8257_UNREGISTERED_DMA_EVENT;
extern uint16_t _TRACE_JAZZIO_READ_DSTATE;
extern uint16_t _TRACE_JAZZIO_WRITE_DSTATE;
extern uint16_t _TRACE_RC4030_READ_DSTATE;
extern uint16_t _TRACE_RC4030_WRITE_DSTATE;
extern uint16_t _TRACE_LEDMA_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_LEDMA_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_SPARC32_DMA_SET_IRQ_RAISE_DSTATE;
extern uint16_t _TRACE_SPARC32_DMA_SET_IRQ_LOWER_DSTATE;
extern uint16_t _TRACE_ESPDMA_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_ESPDMA_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_SPARC32_DMA_MEM_READL_DSTATE;
extern uint16_t _TRACE_SPARC32_DMA_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SPARC32_DMA_ENABLE_RAISE_DSTATE;
extern uint16_t _TRACE_SPARC32_DMA_ENABLE_LOWER_DSTATE;
extern uint16_t _TRACE_SUN4M_IOMMU_MEM_READL_DSTATE;
extern uint16_t _TRACE_SUN4M_IOMMU_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SUN4M_IOMMU_MEM_WRITEL_CTRL_DSTATE;
extern uint16_t _TRACE_SUN4M_IOMMU_MEM_WRITEL_TLBFLUSH_DSTATE;
extern uint16_t _TRACE_SUN4M_IOMMU_MEM_WRITEL_PGFLUSH_DSTATE;
extern uint16_t _TRACE_SUN4M_IOMMU_PAGE_GET_FLAGS_DSTATE;
extern uint16_t _TRACE_SUN4M_IOMMU_TRANSLATE_PA_DSTATE;
extern uint16_t _TRACE_SUN4M_IOMMU_BAD_ADDR_DSTATE;
extern uint16_t _TRACE_I8257_UNREGISTERED_DMA_DSTATE;
#define TRACE_JAZZIO_READ_ENABLED 1
#define TRACE_JAZZIO_WRITE_ENABLED 1
#define TRACE_RC4030_READ_ENABLED 1
#define TRACE_RC4030_WRITE_ENABLED 1
#define TRACE_LEDMA_MEMORY_READ_ENABLED 1
#define TRACE_LEDMA_MEMORY_WRITE_ENABLED 1
#define TRACE_SPARC32_DMA_SET_IRQ_RAISE_ENABLED 1
#define TRACE_SPARC32_DMA_SET_IRQ_LOWER_ENABLED 1
#define TRACE_ESPDMA_MEMORY_READ_ENABLED 1
#define TRACE_ESPDMA_MEMORY_WRITE_ENABLED 1
#define TRACE_SPARC32_DMA_MEM_READL_ENABLED 1
#define TRACE_SPARC32_DMA_MEM_WRITEL_ENABLED 1
#define TRACE_SPARC32_DMA_ENABLE_RAISE_ENABLED 1
#define TRACE_SPARC32_DMA_ENABLE_LOWER_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_READL_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_CTRL_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_TLBFLUSH_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_PGFLUSH_ENABLED 1
#define TRACE_SUN4M_IOMMU_PAGE_GET_FLAGS_ENABLED 1
#define TRACE_SUN4M_IOMMU_TRANSLATE_PA_ENABLED 1
#define TRACE_SUN4M_IOMMU_BAD_ADDR_ENABLED 1
#define TRACE_I8257_UNREGISTERED_DMA_ENABLED 1
#include "qemu/log.h"


static inline void trace_jazzio_read(uint64_t addr, uint32_t ret)
{
    if (true) {
        if (trace_event_get_state(TRACE_JAZZIO_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:jazzio_read " "read reg[0x%"PRIx64"] = 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, ret);
        }
    }
}

static inline void trace_jazzio_write(uint64_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_JAZZIO_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:jazzio_write " "write reg[0x%"PRIx64"] = 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_rc4030_read(uint64_t addr, uint32_t ret)
{
    if (true) {
        if (trace_event_get_state(TRACE_RC4030_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:rc4030_read " "read reg[0x%"PRIx64"] = 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, ret);
        }
    }
}

static inline void trace_rc4030_write(uint64_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_RC4030_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:rc4030_write " "write reg[0x%"PRIx64"] = 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_ledma_memory_read(uint64_t addr)
{
    if (true) {
        if (trace_event_get_state(TRACE_LEDMA_MEMORY_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ledma_memory_read " "DMA read addr 0x%"PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr);
        }
    }
}

static inline void trace_ledma_memory_write(uint64_t addr)
{
    if (true) {
        if (trace_event_get_state(TRACE_LEDMA_MEMORY_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ledma_memory_write " "DMA write addr 0x%"PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr);
        }
    }
}

static inline void trace_sparc32_dma_set_irq_raise(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_SPARC32_DMA_SET_IRQ_RAISE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sparc32_dma_set_irq_raise " "Raise IRQ" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_sparc32_dma_set_irq_lower(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_SPARC32_DMA_SET_IRQ_LOWER)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sparc32_dma_set_irq_lower " "Lower IRQ" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_espdma_memory_read(uint32_t addr)
{
    if (true) {
        if (trace_event_get_state(TRACE_ESPDMA_MEMORY_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:espdma_memory_read " "DMA read addr 0x%08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr);
        }
    }
}

static inline void trace_espdma_memory_write(uint32_t addr)
{
    if (true) {
        if (trace_event_get_state(TRACE_ESPDMA_MEMORY_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:espdma_memory_write " "DMA write addr 0x%08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr);
        }
    }
}

static inline void trace_sparc32_dma_mem_readl(uint64_t addr, uint32_t ret)
{
    if (true) {
        if (trace_event_get_state(TRACE_SPARC32_DMA_MEM_READL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sparc32_dma_mem_readl " "read dmareg %"PRIx64": 0x%08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, ret);
        }
    }
}

static inline void trace_sparc32_dma_mem_writel(uint64_t addr, uint32_t old, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_SPARC32_DMA_MEM_WRITEL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sparc32_dma_mem_writel " "write dmareg %"PRIx64": 0x%08x -> 0x%08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, old, val);
        }
    }
}

static inline void trace_sparc32_dma_enable_raise(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_SPARC32_DMA_ENABLE_RAISE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sparc32_dma_enable_raise " "Raise DMA enable" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_sparc32_dma_enable_lower(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_SPARC32_DMA_ENABLE_LOWER)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sparc32_dma_enable_lower " "Lower DMA enable" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_sun4m_iommu_mem_readl(uint64_t addr, uint32_t ret)
{
    if (true) {
        if (trace_event_get_state(TRACE_SUN4M_IOMMU_MEM_READL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sun4m_iommu_mem_readl " "read reg[%"PRIx64"] = %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, ret);
        }
    }
}

static inline void trace_sun4m_iommu_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_SUN4M_IOMMU_MEM_WRITEL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sun4m_iommu_mem_writel " "write reg[%"PRIx64"] = %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_sun4m_iommu_mem_writel_ctrl(uint64_t iostart)
{
    if (true) {
        if (trace_event_get_state(TRACE_SUN4M_IOMMU_MEM_WRITEL_CTRL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sun4m_iommu_mem_writel_ctrl " "iostart = %"PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , iostart);
        }
    }
}

static inline void trace_sun4m_iommu_mem_writel_tlbflush(uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_SUN4M_IOMMU_MEM_WRITEL_TLBFLUSH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sun4m_iommu_mem_writel_tlbflush " "tlb flush %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , val);
        }
    }
}

static inline void trace_sun4m_iommu_mem_writel_pgflush(uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_SUN4M_IOMMU_MEM_WRITEL_PGFLUSH)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sun4m_iommu_mem_writel_pgflush " "page flush %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , val);
        }
    }
}

static inline void trace_sun4m_iommu_page_get_flags(uint64_t pa, uint64_t iopte, uint32_t ret)
{
    if (true) {
        if (trace_event_get_state(TRACE_SUN4M_IOMMU_PAGE_GET_FLAGS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sun4m_iommu_page_get_flags " "get flags addr %"PRIx64" => pte %"PRIx64", *pte = %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , pa, iopte, ret);
        }
    }
}

static inline void trace_sun4m_iommu_translate_pa(uint64_t addr, uint64_t pa, uint32_t iopte)
{
    if (true) {
        if (trace_event_get_state(TRACE_SUN4M_IOMMU_TRANSLATE_PA)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sun4m_iommu_translate_pa " "xlate dva %"PRIx64" => pa %"PRIx64" iopte = %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, pa, iopte);
        }
    }
}

static inline void trace_sun4m_iommu_bad_addr(uint64_t addr)
{
    if (true) {
        if (trace_event_get_state(TRACE_SUN4M_IOMMU_BAD_ADDR)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:sun4m_iommu_bad_addr " "bad addr %"PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr);
        }
    }
}

static inline void trace_i8257_unregistered_dma(int nchan, int dma_pos, int dma_len)
{
    if (true) {
        if (trace_event_get_state(TRACE_I8257_UNREGISTERED_DMA)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:i8257_unregistered_dma " "unregistered DMA channel used nchan=%d dma_pos=%d dma_len=%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , nchan, dma_pos, dma_len);
        }
    }
}
#endif /* TRACE_HW_DMA_GENERATED_TRACERS_H */

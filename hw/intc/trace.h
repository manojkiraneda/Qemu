/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_INTC_GENERATED_TRACERS_H
#define TRACE_HW_INTC_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_CPU_SET_APIC_BASE_EVENT;
extern TraceEvent _TRACE_CPU_GET_APIC_BASE_EVENT;
extern TraceEvent _TRACE_APIC_REPORT_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_RESET_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_GET_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_LOCAL_DELIVER_EVENT;
extern TraceEvent _TRACE_APIC_DELIVER_IRQ_EVENT;
extern TraceEvent _TRACE_APIC_MEM_READL_EVENT;
extern TraceEvent _TRACE_APIC_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_IOAPIC_SET_REMOTE_IRR_EVENT;
extern TraceEvent _TRACE_IOAPIC_CLEAR_REMOTE_IRR_EVENT;
extern TraceEvent _TRACE_IOAPIC_EOI_BROADCAST_EVENT;
extern TraceEvent _TRACE_IOAPIC_MEM_READ_EVENT;
extern TraceEvent _TRACE_IOAPIC_MEM_WRITE_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_EVENT;
extern TraceEvent _TRACE_SLAVIO_CHECK_INTERRUPTS_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_IRQ_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_TIMER_IRQ_CPU_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_CHECK_IRQS_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_ACK_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_READL_UNKNOWN_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_EVENT;
extern TraceEvent _TRACE_LM32_PIC_RAISE_IRQ_EVENT;
extern TraceEvent _TRACE_LM32_PIC_LOWER_IRQ_EVENT;
extern TraceEvent _TRACE_LM32_PIC_INTERRUPT_EVENT;
extern TraceEvent _TRACE_LM32_PIC_SET_IM_EVENT;
extern TraceEvent _TRACE_LM32_PIC_SET_IP_EVENT;
extern TraceEvent _TRACE_LM32_PIC_GET_IM_EVENT;
extern TraceEvent _TRACE_LM32_PIC_GET_IP_EVENT;
extern TraceEvent _TRACE_XICS_ICP_CHECK_IPI_EVENT;
extern TraceEvent _TRACE_XICS_ICP_ACCEPT_EVENT;
extern TraceEvent _TRACE_XICS_ICP_EOI_EVENT;
extern TraceEvent _TRACE_XICS_ICP_IRQ_EVENT;
extern TraceEvent _TRACE_XICS_ICP_RAISE_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SIMPLE_SET_IRQ_MSI_EVENT;
extern TraceEvent _TRACE_XICS_MASKED_PENDING_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SIMPLE_SET_IRQ_LSI_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SIMPLE_WRITE_XIVE_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SIMPLE_REJECT_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SIMPLE_EOI_EVENT;
extern TraceEvent _TRACE_XICS_ALLOC_EVENT;
extern TraceEvent _TRACE_XICS_ALLOC_BLOCK_EVENT;
extern TraceEvent _TRACE_XICS_ICS_FREE_EVENT;
extern TraceEvent _TRACE_XICS_ICS_FREE_WARN_EVENT;
extern TraceEvent _TRACE_FLIC_CREATE_DEVICE_EVENT;
extern TraceEvent _TRACE_FLIC_NO_DEVICE_API_EVENT;
extern TraceEvent _TRACE_FLIC_RESET_FAILED_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_UPDATE_FIQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_WRITE_EVENT;
extern TraceEvent _TRACE_GIC_ENABLE_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_DISABLE_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_UPDATE_BESTIRQ_EVENT;
extern TraceEvent _TRACE_GIC_UPDATE_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_ACKNOWLEDGE_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_PMR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_PMR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_BPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_BPR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN1_EL3_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_EL3_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_EL3_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_UPDATE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_SET_IRQS_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_GENERATE_SGI_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IAR0_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IAR1_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_EOIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_HPPIR0_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_HPPIR1_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_DIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_RPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_HCR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_HCR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VMCR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VMCR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR32_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LRC_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR32_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LRC_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VTR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_MISR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_EISR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_ELRSR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_BPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_BPR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_PMR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_PMR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IGRPEN_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IGRPEN_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_CTLR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_CTLR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_RPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_HPPIR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_DIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IAR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_EOIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_VIRT_UPDATE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_VIRT_SET_IRQS_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_READ_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_BADREAD_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_BADWRITE_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_READ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_BADREAD_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_BADWRITE_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_SEND_SGI_EVENT;
extern TraceEvent _TRACE_NVIC_RECOMPUTE_STATE_EVENT;
extern TraceEvent _TRACE_NVIC_SET_PRIO_EVENT;
extern TraceEvent _TRACE_NVIC_IRQ_UPDATE_EVENT;
extern TraceEvent _TRACE_NVIC_ESCALATE_PRIO_EVENT;
extern TraceEvent _TRACE_NVIC_ESCALATE_DISABLED_EVENT;
extern TraceEvent _TRACE_NVIC_SET_PENDING_EVENT;
extern TraceEvent _TRACE_NVIC_CLEAR_PENDING_EVENT;
extern TraceEvent _TRACE_NVIC_SET_PENDING_LEVEL_EVENT;
extern TraceEvent _TRACE_NVIC_ACKNOWLEDGE_IRQ_EVENT;
extern TraceEvent _TRACE_NVIC_COMPLETE_IRQ_EVENT;
extern TraceEvent _TRACE_NVIC_SET_IRQ_LEVEL_EVENT;
extern TraceEvent _TRACE_NVIC_SYSREG_READ_EVENT;
extern TraceEvent _TRACE_NVIC_SYSREG_WRITE_EVENT;
extern uint16_t _TRACE_CPU_SET_APIC_BASE_DSTATE;
extern uint16_t _TRACE_CPU_GET_APIC_BASE_DSTATE;
extern uint16_t _TRACE_APIC_REPORT_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_RESET_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_GET_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_LOCAL_DELIVER_DSTATE;
extern uint16_t _TRACE_APIC_DELIVER_IRQ_DSTATE;
extern uint16_t _TRACE_APIC_MEM_READL_DSTATE;
extern uint16_t _TRACE_APIC_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_IOAPIC_SET_REMOTE_IRR_DSTATE;
extern uint16_t _TRACE_IOAPIC_CLEAR_REMOTE_IRR_DSTATE;
extern uint16_t _TRACE_IOAPIC_EOI_BROADCAST_DSTATE;
extern uint16_t _TRACE_IOAPIC_MEM_READ_DSTATE;
extern uint16_t _TRACE_IOAPIC_MEM_WRITE_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_DSTATE;
extern uint16_t _TRACE_SLAVIO_CHECK_INTERRUPTS_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_IRQ_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_TIMER_IRQ_CPU_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_CHECK_IRQS_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_ACK_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_READL_UNKNOWN_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_DSTATE;
extern uint16_t _TRACE_LM32_PIC_RAISE_IRQ_DSTATE;
extern uint16_t _TRACE_LM32_PIC_LOWER_IRQ_DSTATE;
extern uint16_t _TRACE_LM32_PIC_INTERRUPT_DSTATE;
extern uint16_t _TRACE_LM32_PIC_SET_IM_DSTATE;
extern uint16_t _TRACE_LM32_PIC_SET_IP_DSTATE;
extern uint16_t _TRACE_LM32_PIC_GET_IM_DSTATE;
extern uint16_t _TRACE_LM32_PIC_GET_IP_DSTATE;
extern uint16_t _TRACE_XICS_ICP_CHECK_IPI_DSTATE;
extern uint16_t _TRACE_XICS_ICP_ACCEPT_DSTATE;
extern uint16_t _TRACE_XICS_ICP_EOI_DSTATE;
extern uint16_t _TRACE_XICS_ICP_IRQ_DSTATE;
extern uint16_t _TRACE_XICS_ICP_RAISE_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SIMPLE_SET_IRQ_MSI_DSTATE;
extern uint16_t _TRACE_XICS_MASKED_PENDING_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SIMPLE_SET_IRQ_LSI_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SIMPLE_WRITE_XIVE_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SIMPLE_REJECT_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SIMPLE_EOI_DSTATE;
extern uint16_t _TRACE_XICS_ALLOC_DSTATE;
extern uint16_t _TRACE_XICS_ALLOC_BLOCK_DSTATE;
extern uint16_t _TRACE_XICS_ICS_FREE_DSTATE;
extern uint16_t _TRACE_XICS_ICS_FREE_WARN_DSTATE;
extern uint16_t _TRACE_FLIC_CREATE_DEVICE_DSTATE;
extern uint16_t _TRACE_FLIC_NO_DEVICE_API_DSTATE;
extern uint16_t _TRACE_FLIC_RESET_FAILED_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_UPDATE_FIQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_WRITE_DSTATE;
extern uint16_t _TRACE_GIC_ENABLE_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_DISABLE_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_UPDATE_BESTIRQ_DSTATE;
extern uint16_t _TRACE_GIC_UPDATE_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_ACKNOWLEDGE_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_PMR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_PMR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_BPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_BPR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN1_EL3_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_EL3_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_EL3_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_UPDATE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_SET_IRQS_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_GENERATE_SGI_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IAR0_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IAR1_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_EOIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_HPPIR0_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_HPPIR1_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_DIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_RPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_HCR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_HCR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VMCR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VMCR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR32_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LRC_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR32_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LRC_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VTR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_MISR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_EISR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_ELRSR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_BPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_BPR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_PMR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_PMR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IGRPEN_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IGRPEN_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_CTLR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_CTLR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_RPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_HPPIR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_DIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IAR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_EOIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_VIRT_UPDATE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_VIRT_SET_IRQS_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_READ_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_BADREAD_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_BADWRITE_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_READ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_BADREAD_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_BADWRITE_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_SEND_SGI_DSTATE;
extern uint16_t _TRACE_NVIC_RECOMPUTE_STATE_DSTATE;
extern uint16_t _TRACE_NVIC_SET_PRIO_DSTATE;
extern uint16_t _TRACE_NVIC_IRQ_UPDATE_DSTATE;
extern uint16_t _TRACE_NVIC_ESCALATE_PRIO_DSTATE;
extern uint16_t _TRACE_NVIC_ESCALATE_DISABLED_DSTATE;
extern uint16_t _TRACE_NVIC_SET_PENDING_DSTATE;
extern uint16_t _TRACE_NVIC_CLEAR_PENDING_DSTATE;
extern uint16_t _TRACE_NVIC_SET_PENDING_LEVEL_DSTATE;
extern uint16_t _TRACE_NVIC_ACKNOWLEDGE_IRQ_DSTATE;
extern uint16_t _TRACE_NVIC_COMPLETE_IRQ_DSTATE;
extern uint16_t _TRACE_NVIC_SET_IRQ_LEVEL_DSTATE;
extern uint16_t _TRACE_NVIC_SYSREG_READ_DSTATE;
extern uint16_t _TRACE_NVIC_SYSREG_WRITE_DSTATE;
#define TRACE_CPU_SET_APIC_BASE_ENABLED 1
#define TRACE_CPU_GET_APIC_BASE_ENABLED 1
#define TRACE_APIC_REPORT_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_RESET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_GET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_LOCAL_DELIVER_ENABLED 1
#define TRACE_APIC_DELIVER_IRQ_ENABLED 1
#define TRACE_APIC_MEM_READL_ENABLED 1
#define TRACE_APIC_MEM_WRITEL_ENABLED 1
#define TRACE_IOAPIC_SET_REMOTE_IRR_ENABLED 1
#define TRACE_IOAPIC_CLEAR_REMOTE_IRR_ENABLED 1
#define TRACE_IOAPIC_EOI_BROADCAST_ENABLED 1
#define TRACE_IOAPIC_MEM_READ_ENABLED 1
#define TRACE_IOAPIC_MEM_WRITE_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_ENABLED 1
#define TRACE_SLAVIO_CHECK_INTERRUPTS_ENABLED 1
#define TRACE_SLAVIO_SET_IRQ_ENABLED 1
#define TRACE_SLAVIO_SET_TIMER_IRQ_CPU_ENABLED 1
#define TRACE_GRLIB_IRQMP_CHECK_IRQS_ENABLED 1
#define TRACE_GRLIB_IRQMP_ACK_ENABLED 1
#define TRACE_GRLIB_IRQMP_SET_IRQ_ENABLED 1
#define TRACE_GRLIB_IRQMP_READL_UNKNOWN_ENABLED 1
#define TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_ENABLED 1
#define TRACE_LM32_PIC_RAISE_IRQ_ENABLED 1
#define TRACE_LM32_PIC_LOWER_IRQ_ENABLED 1
#define TRACE_LM32_PIC_INTERRUPT_ENABLED 1
#define TRACE_LM32_PIC_SET_IM_ENABLED 1
#define TRACE_LM32_PIC_SET_IP_ENABLED 1
#define TRACE_LM32_PIC_GET_IM_ENABLED 1
#define TRACE_LM32_PIC_GET_IP_ENABLED 1
#define TRACE_XICS_ICP_CHECK_IPI_ENABLED 1
#define TRACE_XICS_ICP_ACCEPT_ENABLED 1
#define TRACE_XICS_ICP_EOI_ENABLED 1
#define TRACE_XICS_ICP_IRQ_ENABLED 1
#define TRACE_XICS_ICP_RAISE_ENABLED 1
#define TRACE_XICS_ICS_SIMPLE_SET_IRQ_MSI_ENABLED 1
#define TRACE_XICS_MASKED_PENDING_ENABLED 1
#define TRACE_XICS_ICS_SIMPLE_SET_IRQ_LSI_ENABLED 1
#define TRACE_XICS_ICS_SIMPLE_WRITE_XIVE_ENABLED 1
#define TRACE_XICS_ICS_SIMPLE_REJECT_ENABLED 1
#define TRACE_XICS_ICS_SIMPLE_EOI_ENABLED 1
#define TRACE_XICS_ALLOC_ENABLED 1
#define TRACE_XICS_ALLOC_BLOCK_ENABLED 1
#define TRACE_XICS_ICS_FREE_ENABLED 1
#define TRACE_XICS_ICS_FREE_WARN_ENABLED 1
#define TRACE_FLIC_CREATE_DEVICE_ENABLED 1
#define TRACE_FLIC_NO_DEVICE_API_ENABLED 1
#define TRACE_FLIC_RESET_FAILED_ENABLED 1
#define TRACE_ASPEED_VIC_SET_IRQ_ENABLED 1
#define TRACE_ASPEED_VIC_UPDATE_FIQ_ENABLED 1
#define TRACE_ASPEED_VIC_UPDATE_IRQ_ENABLED 1
#define TRACE_ASPEED_VIC_READ_ENABLED 1
#define TRACE_ASPEED_VIC_WRITE_ENABLED 1
#define TRACE_GIC_ENABLE_IRQ_ENABLED 1
#define TRACE_GIC_DISABLE_IRQ_ENABLED 1
#define TRACE_GIC_SET_IRQ_ENABLED 1
#define TRACE_GIC_UPDATE_BESTIRQ_ENABLED 1
#define TRACE_GIC_UPDATE_SET_IRQ_ENABLED 1
#define TRACE_GIC_ACKNOWLEDGE_IRQ_ENABLED 1
#define TRACE_GICV3_ICC_PMR_READ_ENABLED 1
#define TRACE_GICV3_ICC_PMR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_BPR_READ_ENABLED 1
#define TRACE_GICV3_ICC_BPR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_AP_READ_ENABLED 1
#define TRACE_GICV3_ICC_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN_READ_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN1_EL3_READ_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_READ_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_EL3_READ_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_EL3_WRITE_ENABLED 1
#define TRACE_GICV3_CPUIF_UPDATE_ENABLED 1
#define TRACE_GICV3_CPUIF_SET_IRQS_ENABLED 1
#define TRACE_GICV3_ICC_GENERATE_SGI_ENABLED 1
#define TRACE_GICV3_ICC_IAR0_READ_ENABLED 1
#define TRACE_GICV3_ICC_IAR1_READ_ENABLED 1
#define TRACE_GICV3_ICC_EOIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_HPPIR0_READ_ENABLED 1
#define TRACE_GICV3_ICC_HPPIR1_READ_ENABLED 1
#define TRACE_GICV3_ICC_DIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_RPR_READ_ENABLED 1
#define TRACE_GICV3_ICH_AP_READ_ENABLED 1
#define TRACE_GICV3_ICH_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_HCR_READ_ENABLED 1
#define TRACE_GICV3_ICH_HCR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_VMCR_READ_ENABLED 1
#define TRACE_GICV3_ICH_VMCR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LR_READ_ENABLED 1
#define TRACE_GICV3_ICH_LR32_READ_ENABLED 1
#define TRACE_GICV3_ICH_LRC_READ_ENABLED 1
#define TRACE_GICV3_ICH_LR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LR32_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LRC_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_VTR_READ_ENABLED 1
#define TRACE_GICV3_ICH_MISR_READ_ENABLED 1
#define TRACE_GICV3_ICH_EISR_READ_ENABLED 1
#define TRACE_GICV3_ICH_ELRSR_READ_ENABLED 1
#define TRACE_GICV3_ICV_AP_READ_ENABLED 1
#define TRACE_GICV3_ICV_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_BPR_READ_ENABLED 1
#define TRACE_GICV3_ICV_BPR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_PMR_READ_ENABLED 1
#define TRACE_GICV3_ICV_PMR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_IGRPEN_READ_ENABLED 1
#define TRACE_GICV3_ICV_IGRPEN_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_CTLR_READ_ENABLED 1
#define TRACE_GICV3_ICV_CTLR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_RPR_READ_ENABLED 1
#define TRACE_GICV3_ICV_HPPIR_READ_ENABLED 1
#define TRACE_GICV3_ICV_DIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_IAR_READ_ENABLED 1
#define TRACE_GICV3_ICV_EOIR_WRITE_ENABLED 1
#define TRACE_GICV3_CPUIF_VIRT_UPDATE_ENABLED 1
#define TRACE_GICV3_CPUIF_VIRT_SET_IRQS_ENABLED 1
#define TRACE_GICV3_DIST_READ_ENABLED 1
#define TRACE_GICV3_DIST_BADREAD_ENABLED 1
#define TRACE_GICV3_DIST_WRITE_ENABLED 1
#define TRACE_GICV3_DIST_BADWRITE_ENABLED 1
#define TRACE_GICV3_DIST_SET_IRQ_ENABLED 1
#define TRACE_GICV3_REDIST_READ_ENABLED 1
#define TRACE_GICV3_REDIST_BADREAD_ENABLED 1
#define TRACE_GICV3_REDIST_WRITE_ENABLED 1
#define TRACE_GICV3_REDIST_BADWRITE_ENABLED 1
#define TRACE_GICV3_REDIST_SET_IRQ_ENABLED 1
#define TRACE_GICV3_REDIST_SEND_SGI_ENABLED 1
#define TRACE_NVIC_RECOMPUTE_STATE_ENABLED 1
#define TRACE_NVIC_SET_PRIO_ENABLED 1
#define TRACE_NVIC_IRQ_UPDATE_ENABLED 1
#define TRACE_NVIC_ESCALATE_PRIO_ENABLED 1
#define TRACE_NVIC_ESCALATE_DISABLED_ENABLED 1
#define TRACE_NVIC_SET_PENDING_ENABLED 1
#define TRACE_NVIC_CLEAR_PENDING_ENABLED 1
#define TRACE_NVIC_SET_PENDING_LEVEL_ENABLED 1
#define TRACE_NVIC_ACKNOWLEDGE_IRQ_ENABLED 1
#define TRACE_NVIC_COMPLETE_IRQ_ENABLED 1
#define TRACE_NVIC_SET_IRQ_LEVEL_ENABLED 1
#define TRACE_NVIC_SYSREG_READ_ENABLED 1
#define TRACE_NVIC_SYSREG_WRITE_ENABLED 1
#include "qemu/log.h"


static inline void trace_cpu_set_apic_base(uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPU_SET_APIC_BASE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpu_set_apic_base " "%016"PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , val);
        }
    }
}

static inline void trace_cpu_get_apic_base(uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_CPU_GET_APIC_BASE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:cpu_get_apic_base " "%016"PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , val);
        }
    }
}

static inline void trace_apic_report_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        if (trace_event_get_state(TRACE_APIC_REPORT_IRQ_DELIVERED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:apic_report_irq_delivered " "coalescing %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , apic_irq_delivered);
        }
    }
}

static inline void trace_apic_reset_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        if (trace_event_get_state(TRACE_APIC_RESET_IRQ_DELIVERED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:apic_reset_irq_delivered " "old coalescing %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , apic_irq_delivered);
        }
    }
}

static inline void trace_apic_get_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        if (trace_event_get_state(TRACE_APIC_GET_IRQ_DELIVERED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:apic_get_irq_delivered " "returning coalescing %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , apic_irq_delivered);
        }
    }
}

static inline void trace_apic_local_deliver(int vector, uint32_t lvt)
{
    if (true) {
        if (trace_event_get_state(TRACE_APIC_LOCAL_DELIVER)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:apic_local_deliver " "vector %d delivery mode %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , vector, lvt);
        }
    }
}

static inline void trace_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode)
{
    if (true) {
        if (trace_event_get_state(TRACE_APIC_DELIVER_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:apic_deliver_irq " "dest %d dest_mode %d delivery_mode %d vector %d trigger_mode %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , dest, dest_mode, delivery_mode, vector_num, trigger_mode);
        }
    }
}

static inline void trace_apic_mem_readl(uint64_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_APIC_MEM_READL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:apic_mem_readl " "%"PRIx64" = %08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_apic_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_APIC_MEM_WRITEL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:apic_mem_writel " "%"PRIx64" = %08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_ioapic_set_remote_irr(int n)
{
    if (true) {
        if (trace_event_get_state(TRACE_IOAPIC_SET_REMOTE_IRR)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ioapic_set_remote_irr " "set remote irr for pin %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , n);
        }
    }
}

static inline void trace_ioapic_clear_remote_irr(int n, int vector)
{
    if (true) {
        if (trace_event_get_state(TRACE_IOAPIC_CLEAR_REMOTE_IRR)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ioapic_clear_remote_irr " "clear remote irr for pin %d vector %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , n, vector);
        }
    }
}

static inline void trace_ioapic_eoi_broadcast(int vector)
{
    if (true) {
        if (trace_event_get_state(TRACE_IOAPIC_EOI_BROADCAST)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ioapic_eoi_broadcast " "EOI broadcast for vector %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , vector);
        }
    }
}

static inline void trace_ioapic_mem_read(uint8_t addr, uint8_t size, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_IOAPIC_MEM_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ioapic_mem_read " "ioapic mem read addr 0x%"PRIx8" size 0x%"PRIx8" retval 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, size, val);
        }
    }
}

static inline void trace_ioapic_mem_write(uint8_t addr, uint8_t size, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_IOAPIC_MEM_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ioapic_mem_write " "ioapic mem write addr 0x%"PRIx8" size 0x%"PRIx8" val 0x%"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, size, val);
        }
    }
}

static inline void trace_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_READL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_intctl_mem_readl " "read cpu %d reg 0x%"PRIx64" = %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, addr, ret);
        }
    }
}

static inline void trace_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_WRITEL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_intctl_mem_writel " "write cpu %d reg 0x%"PRIx64" = %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, addr, val);
        }
    }
}

static inline void trace_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_intctl_mem_writel_clear " "Cleared cpu %d irq mask %x, curmask %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val, intreg_pending);
        }
    }
}

static inline void trace_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_intctl_mem_writel_set " "Set cpu %d irq mask %x, curmask %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val, intreg_pending);
        }
    }
}

static inline void trace_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_READL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_intctlm_mem_readl " "read system reg 0x%"PRIx64" = %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, ret);
        }
    }
}

static inline void trace_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_intctlm_mem_writel " "write system reg 0x%"PRIx64" = %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, val);
        }
    }
}

static inline void trace_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_intctlm_mem_writel_enable " "Enabled master irq mask %x, curmask %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , val, intregm_disabled);
        }
    }
}

static inline void trace_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_intctlm_mem_writel_disable " "Disabled master irq mask %x, curmask %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , val, intregm_disabled);
        }
    }
}

static inline void trace_slavio_intctlm_mem_writel_target(uint32_t cpu)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_intctlm_mem_writel_target " "Set master irq cpu %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu);
        }
    }
}

static inline void trace_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_CHECK_INTERRUPTS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_check_interrupts " "pending %x disabled %x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , pending, intregm_disabled);
        }
    }
}

static inline void trace_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_SET_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_set_irq " "Set cpu %d irq %d -> pil %d level %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , target_cpu, irq, pil, level);
        }
    }
}

static inline void trace_slavio_set_timer_irq_cpu(int cpu, int level)
{
    if (true) {
        if (trace_event_get_state(TRACE_SLAVIO_SET_TIMER_IRQ_CPU)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:slavio_set_timer_irq_cpu " "Set cpu %d local timer level %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, level);
        }
    }
}

static inline void trace_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2)
{
    if (true) {
        if (trace_event_get_state(TRACE_GRLIB_IRQMP_CHECK_IRQS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:grlib_irqmp_check_irqs " "pend:0x%04x force:0x%04x mask:0x%04x lvl1:0x%04x lvl0:0x%04x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , pend, force, mask, lvl1, lvl2);
        }
    }
}

static inline void trace_grlib_irqmp_ack(int intno)
{
    if (true) {
        if (trace_event_get_state(TRACE_GRLIB_IRQMP_ACK)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:grlib_irqmp_ack " "interrupt:%d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , intno);
        }
    }
}

static inline void trace_grlib_irqmp_set_irq(int irq)
{
    if (true) {
        if (trace_event_get_state(TRACE_GRLIB_IRQMP_SET_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:grlib_irqmp_set_irq " "Raise CPU IRQ %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq);
        }
    }
}

static inline void trace_grlib_irqmp_readl_unknown(uint64_t addr)
{
    if (true) {
        if (trace_event_get_state(TRACE_GRLIB_IRQMP_READL_UNKNOWN)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:grlib_irqmp_readl_unknown " "addr 0x%"PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr);
        }
    }
}

static inline void trace_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:grlib_irqmp_writel_unknown " "addr 0x%"PRIx64" value 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, value);
        }
    }
}

static inline void trace_lm32_pic_raise_irq(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_LM32_PIC_RAISE_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:lm32_pic_raise_irq " "Raise CPU interrupt" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_lm32_pic_lower_irq(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_LM32_PIC_LOWER_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:lm32_pic_lower_irq " "Lower CPU interrupt" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_lm32_pic_interrupt(int irq, int level)
{
    if (true) {
        if (trace_event_get_state(TRACE_LM32_PIC_INTERRUPT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:lm32_pic_interrupt " "Set IRQ%d %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq, level);
        }
    }
}

static inline void trace_lm32_pic_set_im(uint32_t im)
{
    if (true) {
        if (trace_event_get_state(TRACE_LM32_PIC_SET_IM)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:lm32_pic_set_im " "im 0x%08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , im);
        }
    }
}

static inline void trace_lm32_pic_set_ip(uint32_t ip)
{
    if (true) {
        if (trace_event_get_state(TRACE_LM32_PIC_SET_IP)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:lm32_pic_set_ip " "ip 0x%08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , ip);
        }
    }
}

static inline void trace_lm32_pic_get_im(uint32_t im)
{
    if (true) {
        if (trace_event_get_state(TRACE_LM32_PIC_GET_IM)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:lm32_pic_get_im " "im 0x%08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , im);
        }
    }
}

static inline void trace_lm32_pic_get_ip(uint32_t ip)
{
    if (true) {
        if (trace_event_get_state(TRACE_LM32_PIC_GET_IP)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:lm32_pic_get_ip " "ip 0x%08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , ip);
        }
    }
}

static inline void trace_xics_icp_check_ipi(int server, uint8_t mfrr)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICP_CHECK_IPI)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_icp_check_ipi " "CPU %d can take IPI mfrr=%#x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , server, mfrr);
        }
    }
}

static inline void trace_xics_icp_accept(uint32_t old_xirr, uint32_t new_xirr)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICP_ACCEPT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_icp_accept " "icp_accept: XIRR %#"PRIx32"->%#"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , old_xirr, new_xirr);
        }
    }
}

static inline void trace_xics_icp_eoi(int server, uint32_t xirr, uint32_t new_xirr)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICP_EOI)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_icp_eoi " "icp_eoi: server %d given XIRR %#"PRIx32" new XIRR %#"PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , server, xirr, new_xirr);
        }
    }
}

static inline void trace_xics_icp_irq(int server, int nr, uint8_t priority)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICP_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_icp_irq " "cpu %d trying to deliver irq %#"PRIx32" priority %#x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , server, nr, priority);
        }
    }
}

static inline void trace_xics_icp_raise(uint32_t xirr, uint8_t pending_priority)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICP_RAISE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_icp_raise " "raising IRQ new XIRR=%#x new pending priority=%#x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , xirr, pending_priority);
        }
    }
}

static inline void trace_xics_ics_simple_set_irq_msi(int srcno, int nr)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICS_SIMPLE_SET_IRQ_MSI)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_ics_simple_set_irq_msi " "set_irq_msi: srcno %d [irq %#x]" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , srcno, nr);
        }
    }
}

static inline void trace_xics_masked_pending(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_MASKED_PENDING)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_masked_pending " "set_irq_msi: masked pending" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_xics_ics_simple_set_irq_lsi(int srcno, int nr)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICS_SIMPLE_SET_IRQ_LSI)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_ics_simple_set_irq_lsi " "set_irq_lsi: srcno %d [irq %#x]" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , srcno, nr);
        }
    }
}

static inline void trace_xics_ics_simple_write_xive(int nr, int srcno, int server, uint8_t priority)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICS_SIMPLE_WRITE_XIVE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_ics_simple_write_xive " "ics_write_xive: irq %#x [src %d] server %#x prio %#x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , nr, srcno, server, priority);
        }
    }
}

static inline void trace_xics_ics_simple_reject(int nr, int srcno)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICS_SIMPLE_REJECT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_ics_simple_reject " "reject irq %#x [src %d]" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , nr, srcno);
        }
    }
}

static inline void trace_xics_ics_simple_eoi(int nr)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICS_SIMPLE_EOI)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_ics_simple_eoi " "ics_eoi: irq %#x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , nr);
        }
    }
}

static inline void trace_xics_alloc(int irq)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ALLOC)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_alloc " "irq %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq);
        }
    }
}

static inline void trace_xics_alloc_block(int first, int num, bool lsi, int align)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ALLOC_BLOCK)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_alloc_block " "first irq %d, %d irqs, lsi=%d, alignnum %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , first, num, lsi, align);
        }
    }
}

static inline void trace_xics_ics_free(int src, int irq, int num)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICS_FREE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_ics_free " "Source#%d, first irq %d, %d irqs" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , src, irq, num);
        }
    }
}

static inline void trace_xics_ics_free_warn(int src, int irq)
{
    if (true) {
        if (trace_event_get_state(TRACE_XICS_ICS_FREE_WARN)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:xics_ics_free_warn " "Source#%d, irq %d is already free" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , src, irq);
        }
    }
}

static inline void trace_flic_create_device(int err)
{
    if (true) {
        if (trace_event_get_state(TRACE_FLIC_CREATE_DEVICE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:flic_create_device " "flic: create device failed %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , err);
        }
    }
}

static inline void trace_flic_no_device_api(int err)
{
    if (true) {
        if (trace_event_get_state(TRACE_FLIC_NO_DEVICE_API)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:flic_no_device_api " "flic: no Device Contral API support %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , err);
        }
    }
}

static inline void trace_flic_reset_failed(int err)
{
    if (true) {
        if (trace_event_get_state(TRACE_FLIC_RESET_FAILED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:flic_reset_failed " "flic: reset failed %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , err);
        }
    }
}

static inline void trace_aspeed_vic_set_irq(int irq, int level)
{
    if (true) {
        if (trace_event_get_state(TRACE_ASPEED_VIC_SET_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:aspeed_vic_set_irq " "Enabling IRQ %d: %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq, level);
        }
    }
}

static inline void trace_aspeed_vic_update_fiq(int flags)
{
    if (true) {
        if (trace_event_get_state(TRACE_ASPEED_VIC_UPDATE_FIQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:aspeed_vic_update_fiq " "Raising FIQ: %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , flags);
        }
    }
}

static inline void trace_aspeed_vic_update_irq(int flags)
{
    if (true) {
        if (trace_event_get_state(TRACE_ASPEED_VIC_UPDATE_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:aspeed_vic_update_irq " "Raising IRQ: %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , flags);
        }
    }
}

static inline void trace_aspeed_vic_read(uint64_t offset, unsigned size, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_ASPEED_VIC_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:aspeed_vic_read " "From 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , offset, size, value);
        }
    }
}

static inline void trace_aspeed_vic_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (true) {
        if (trace_event_get_state(TRACE_ASPEED_VIC_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:aspeed_vic_write " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , offset, size, data);
        }
    }
}

static inline void trace_gic_enable_irq(int irq)
{
    if (true) {
        if (trace_event_get_state(TRACE_GIC_ENABLE_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gic_enable_irq " "irq %d enabled" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq);
        }
    }
}

static inline void trace_gic_disable_irq(int irq)
{
    if (true) {
        if (trace_event_get_state(TRACE_GIC_DISABLE_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gic_disable_irq " "irq %d disabled" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq);
        }
    }
}

static inline void trace_gic_set_irq(int irq, int level, int cpumask, int target)
{
    if (true) {
        if (trace_event_get_state(TRACE_GIC_SET_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gic_set_irq " "irq %d level %d cpumask 0x%x target 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq, level, cpumask, target);
        }
    }
}

static inline void trace_gic_update_bestirq(int cpu, int irq, int prio, int priority_mask, int running_priority)
{
    if (true) {
        if (trace_event_get_state(TRACE_GIC_UPDATE_BESTIRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gic_update_bestirq " "cpu %d irq %d priority %d cpu priority mask %d cpu running priority %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, irq, prio, priority_mask, running_priority);
        }
    }
}

static inline void trace_gic_update_set_irq(int cpu, const char * name, int level)
{
    if (true) {
        if (trace_event_get_state(TRACE_GIC_UPDATE_SET_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gic_update_set_irq " "cpu[%d]: %s = %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, name, level);
        }
    }
}

static inline void trace_gic_acknowledge_irq(int cpu, int irq)
{
    if (true) {
        if (trace_event_get_state(TRACE_GIC_ACKNOWLEDGE_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gic_acknowledge_irq " "cpu %d acknowledged irq %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, irq);
        }
    }
}

static inline void trace_gicv3_icc_pmr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_PMR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_pmr_read " "GICv3 ICC_PMR read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_pmr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_PMR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_pmr_write " "GICv3 ICC_PMR write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_BPR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_bpr_read " "GICv3 ICC_BPR%d read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_BPR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_bpr_write " "GICv3 ICC_BPR%d write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_AP_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_ap_read " "GICv3 ICC_AP%dR%d read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_AP_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_ap_write " "GICv3 ICC_AP%dR%d write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_igrpen_read " "GICv3 ICC_IGRPEN%d read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_igrpen_write " "GICv3 ICC_IGRPEN%d write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_igrpen1_el3_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN1_EL3_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_igrpen1_el3_read " "GICv3 ICC_IGRPEN1_EL3 read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_igrpen1_el3_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_igrpen1_el3_write " "GICv3 ICC_IGRPEN1_EL3 write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_ctlr_read " "GICv3 ICC_CTLR read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_ctlr_write " "GICv3 ICC_CTLR write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_ctlr_el3_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_EL3_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_ctlr_el3_read " "GICv3 ICC_CTLR_EL3 read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_ctlr_el3_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_EL3_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_ctlr_el3_write " "GICv3 ICC_CTLR_EL3 write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_cpuif_update(uint32_t cpuid, int irq, int grp, int prio)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_CPUIF_UPDATE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_cpuif_update " "GICv3 CPU i/f %x HPPI update: irq %d group %d prio %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpuid, irq, grp, prio);
        }
    }
}

static inline void trace_gicv3_cpuif_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_CPUIF_SET_IRQS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_cpuif_set_irqs " "GICv3 CPU i/f %x HPPI update: setting FIQ %d IRQ %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpuid, fiqlevel, irqlevel);
        }
    }
}

static inline void trace_gicv3_icc_generate_sgi(uint32_t cpuid, int irq, int irm, uint32_t aff, uint32_t targetlist)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_GENERATE_SGI)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_generate_sgi " "GICv3 CPU i/f %x generating SGI %d IRM %d target affinity 0x%xxx targetlist 0x%x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpuid, irq, irm, aff, targetlist);
        }
    }
}

static inline void trace_gicv3_icc_iar0_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_IAR0_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_iar0_read " "GICv3 ICC_IAR0 read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_iar1_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_IAR1_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_iar1_read " "GICv3 ICC_IAR1 read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_EOIR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_eoir_write " "GICv3 ICC_EOIR%d write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_hppir0_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_HPPIR0_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_hppir0_read " "GICv3 ICC_HPPIR0 read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_hppir1_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_HPPIR1_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_hppir1_read " "GICv3 ICC_HPPIR1 read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_dir_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_DIR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_dir_write " "GICv3 ICC_DIR write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icc_rpr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICC_RPR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icc_rpr_read " "GICv3 ICC_RPR read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_AP_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_ap_read " "GICv3 ICH_AP%dR%d read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_AP_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_ap_write " "GICv3 ICH_AP%dR%d write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_hcr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_HCR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_hcr_read " "GICv3 ICH_HCR_EL2 read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_hcr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_HCR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_hcr_write " "GICv3 ICH_HCR_EL2 write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_vmcr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_VMCR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_vmcr_read " "GICv3 ICH_VMCR_EL2 read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_vmcr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_VMCR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_vmcr_write " "GICv3 ICH_VMCR_EL2 write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_lr_read(int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_LR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_lr_read " "GICv3 ICH_LR%d_EL2 read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_lr32_read(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_LR32_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_lr32_read " "GICv3 ICH_LR%d read cpu %x value 0x%" PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_lrc_read(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_LRC_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_lrc_read " "GICv3 ICH_LRC%d read cpu %x value 0x%" PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_lr_write(int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_LR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_lr_write " "GICv3 ICH_LR%d_EL2 write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_lr32_write(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_LR32_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_lr32_write " "GICv3 ICH_LR%d write cpu %x value 0x%" PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_lrc_write(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_LRC_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_lrc_write " "GICv3 ICH_LRC%d write cpu %x value 0x%" PRIx32 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_vtr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_VTR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_vtr_read " "GICv3 ICH_VTR read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_misr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_MISR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_misr_read " "GICv3 ICH_MISR read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_eisr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_EISR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_eisr_read " "GICv3 ICH_EISR read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_ich_elrsr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICH_ELRSR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_ich_elrsr_read " "GICv3 ICH_ELRSR read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_AP_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_ap_read " "GICv3 ICV_AP%dR%d read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_AP_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_ap_write " "GICv3 ICV_AP%dR%d write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, regno, cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_BPR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_bpr_read " "GICv3 ICV_BPR%d read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_BPR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_bpr_write " "GICv3 ICV_BPR%d write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_pmr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_PMR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_pmr_read " "GICv3 ICV_PMR read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_pmr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_PMR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_pmr_write " "GICv3 ICV_PMR write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_IGRPEN_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_igrpen_read " "GICv3 ICV_IGRPEN%d read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_IGRPEN_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_igrpen_write " "GICv3 ICV_IGRPEN%d write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_CTLR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_ctlr_read " "GICv3 ICV_CTLR read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_CTLR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_ctlr_write " "GICv3 ICV_CTLR write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_rpr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_RPR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_rpr_read " "GICv3 ICV_RPR read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_hppir_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_HPPIR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_hppir_read " "GICv3 ICV_HPPIR%d read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_dir_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_DIR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_dir_write " "GICv3 ICV_DIR write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_iar_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_IAR_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_iar_read " "GICv3 ICV_IAR%d read cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_icv_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_ICV_EOIR_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_icv_eoir_write " "GICv3 ICV_EOIR%d write cpu %x value 0x%" PRIx64 "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , grp, cpu, val);
        }
    }
}

static inline void trace_gicv3_cpuif_virt_update(uint32_t cpuid, int idx)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_CPUIF_VIRT_UPDATE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_cpuif_virt_update " "GICv3 CPU i/f %x virt HPPI update LR index %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpuid, idx);
        }
    }
}

static inline void trace_gicv3_cpuif_virt_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel, int maintlevel)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_CPUIF_VIRT_SET_IRQS)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_cpuif_virt_set_irqs " "GICv3 CPU i/f %x virt HPPI update: setting FIQ %d IRQ %d maintenance-irq %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpuid, fiqlevel, irqlevel, maintlevel);
        }
    }
}

static inline void trace_gicv3_dist_read(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_DIST_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_dist_read " "GICv3 distributor read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , offset, data, size, secure);
        }
    }
}

static inline void trace_gicv3_dist_badread(uint64_t offset, unsigned size, bool secure)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_DIST_BADREAD)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_dist_badread " "GICv3 distributor read: offset 0x%" PRIx64 " size %u secure %d: error" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , offset, size, secure);
        }
    }
}

static inline void trace_gicv3_dist_write(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_DIST_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_dist_write " "GICv3 distributor write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , offset, data, size, secure);
        }
    }
}

static inline void trace_gicv3_dist_badwrite(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_DIST_BADWRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_dist_badwrite " "GICv3 distributor write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d: error" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , offset, data, size, secure);
        }
    }
}

static inline void trace_gicv3_dist_set_irq(int irq, int level)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_DIST_SET_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_dist_set_irq " "GICv3 distributor interrupt %d level changed to %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq, level);
        }
    }
}

static inline void trace_gicv3_redist_read(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_REDIST_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_redist_read " "GICv3 redistributor %x read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, offset, data, size, secure);
        }
    }
}

static inline void trace_gicv3_redist_badread(uint32_t cpu, uint64_t offset, unsigned size, bool secure)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_REDIST_BADREAD)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_redist_badread " "GICv3 redistributor %x read: offset 0x%" PRIx64 " size %u secure %d: error" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, offset, size, secure);
        }
    }
}

static inline void trace_gicv3_redist_write(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_REDIST_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_redist_write " "GICv3 redistributor %x write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, offset, data, size, secure);
        }
    }
}

static inline void trace_gicv3_redist_badwrite(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_REDIST_BADWRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_redist_badwrite " "GICv3 redistributor %x write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d: error" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, offset, data, size, secure);
        }
    }
}

static inline void trace_gicv3_redist_set_irq(uint32_t cpu, int irq, int level)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_REDIST_SET_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_redist_set_irq " "GICv3 redistributor %x interrupt %d level changed to %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, irq, level);
        }
    }
}

static inline void trace_gicv3_redist_send_sgi(uint32_t cpu, int irq)
{
    if (true) {
        if (trace_event_get_state(TRACE_GICV3_REDIST_SEND_SGI)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:gicv3_redist_send_sgi " "GICv3 redistributor %x pending SGI %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , cpu, irq);
        }
    }
}

static inline void trace_nvic_recompute_state(int vectpending, int exception_prio)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_RECOMPUTE_STATE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_recompute_state " "NVIC state recomputed: vectpending %d exception_prio %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , vectpending, exception_prio);
        }
    }
}

static inline void trace_nvic_set_prio(int irq, uint8_t prio)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_SET_PRIO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_set_prio " "NVIC set irq %d priority %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq, prio);
        }
    }
}

static inline void trace_nvic_irq_update(int vectpending, int pendprio, int exception_prio, int level)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_IRQ_UPDATE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_irq_update " "NVIC vectpending %d pending prio %d exception_prio %d: setting irq line to %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , vectpending, pendprio, exception_prio, level);
        }
    }
}

static inline void trace_nvic_escalate_prio(int irq, int irqprio, int runprio)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_ESCALATE_PRIO)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_escalate_prio " "NVIC escalating irq %d to HardFault: insufficient priority %d >= %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq, irqprio, runprio);
        }
    }
}

static inline void trace_nvic_escalate_disabled(int irq)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_ESCALATE_DISABLED)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_escalate_disabled " "NVIC escalating irq %d to HardFault: disabled" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq);
        }
    }
}

static inline void trace_nvic_set_pending(int irq, int en, int prio)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_SET_PENDING)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_set_pending " "NVIC set pending irq %d (enabled: %d priority %d)" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq, en, prio);
        }
    }
}

static inline void trace_nvic_clear_pending(int irq, int en, int prio)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_CLEAR_PENDING)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_clear_pending " "NVIC clear pending irq %d (enabled: %d priority %d)" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq, en, prio);
        }
    }
}

static inline void trace_nvic_set_pending_level(int irq)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_SET_PENDING_LEVEL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_set_pending_level " "NVIC set pending: irq %d higher prio than vectpending: setting irq line to 1" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq);
        }
    }
}

static inline void trace_nvic_acknowledge_irq(int irq, int prio)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_ACKNOWLEDGE_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_acknowledge_irq " "NVIC acknowledge IRQ: %d now active (prio %d)" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq, prio);
        }
    }
}

static inline void trace_nvic_complete_irq(int irq)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_COMPLETE_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_complete_irq " "NVIC complete IRQ %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq);
        }
    }
}

static inline void trace_nvic_set_irq_level(int irq, int level)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_SET_IRQ_LEVEL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_set_irq_level " "NVIC external irq %d level set to %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , irq, level);
        }
    }
}

static inline void trace_nvic_sysreg_read(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_SYSREG_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_sysreg_read " "NVIC sysreg read addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, value, size);
        }
    }
}

static inline void trace_nvic_sysreg_write(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        if (trace_event_get_state(TRACE_NVIC_SYSREG_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:nvic_sysreg_write " "NVIC sysreg write addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, value, size);
        }
    }
}
#endif /* TRACE_HW_INTC_GENERATED_TRACERS_H */

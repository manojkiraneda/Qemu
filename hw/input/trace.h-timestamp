/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_INPUT_GENERATED_TRACERS_H
#define TRACE_HW_INPUT_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_PS2_PUT_KEYCODE_EVENT;
extern TraceEvent _TRACE_PS2_READ_DATA_EVENT;
extern TraceEvent _TRACE_PS2_SET_LEDSTATE_EVENT;
extern TraceEvent _TRACE_PS2_RESET_KEYBOARD_EVENT;
extern TraceEvent _TRACE_PS2_WRITE_KEYBOARD_EVENT;
extern TraceEvent _TRACE_PS2_KEYBOARD_SET_TRANSLATION_EVENT;
extern TraceEvent _TRACE_PS2_MOUSE_SEND_PACKET_EVENT;
extern TraceEvent _TRACE_PS2_MOUSE_FAKE_EVENT_EVENT;
extern TraceEvent _TRACE_PS2_WRITE_MOUSE_EVENT;
extern TraceEvent _TRACE_PS2_KBD_RESET_EVENT;
extern TraceEvent _TRACE_PS2_MOUSE_RESET_EVENT;
extern TraceEvent _TRACE_PS2_KBD_INIT_EVENT;
extern TraceEvent _TRACE_PS2_MOUSE_INIT_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SOFTUSB_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SOFTUSB_MEVT_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SOFTUSB_KEVT_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ_EVENT;
extern TraceEvent _TRACE_HID_KBD_QUEUE_FULL_EVENT;
extern TraceEvent _TRACE_VIRTIO_INPUT_QUEUE_FULL_EVENT;
extern uint16_t _TRACE_PS2_PUT_KEYCODE_DSTATE;
extern uint16_t _TRACE_PS2_READ_DATA_DSTATE;
extern uint16_t _TRACE_PS2_SET_LEDSTATE_DSTATE;
extern uint16_t _TRACE_PS2_RESET_KEYBOARD_DSTATE;
extern uint16_t _TRACE_PS2_WRITE_KEYBOARD_DSTATE;
extern uint16_t _TRACE_PS2_KEYBOARD_SET_TRANSLATION_DSTATE;
extern uint16_t _TRACE_PS2_MOUSE_SEND_PACKET_DSTATE;
extern uint16_t _TRACE_PS2_MOUSE_FAKE_EVENT_DSTATE;
extern uint16_t _TRACE_PS2_WRITE_MOUSE_DSTATE;
extern uint16_t _TRACE_PS2_KBD_RESET_DSTATE;
extern uint16_t _TRACE_PS2_MOUSE_RESET_DSTATE;
extern uint16_t _TRACE_PS2_KBD_INIT_DSTATE;
extern uint16_t _TRACE_PS2_MOUSE_INIT_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SOFTUSB_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SOFTUSB_MEVT_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SOFTUSB_KEVT_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ_DSTATE;
extern uint16_t _TRACE_HID_KBD_QUEUE_FULL_DSTATE;
extern uint16_t _TRACE_VIRTIO_INPUT_QUEUE_FULL_DSTATE;
#define TRACE_PS2_PUT_KEYCODE_ENABLED 1
#define TRACE_PS2_READ_DATA_ENABLED 1
#define TRACE_PS2_SET_LEDSTATE_ENABLED 1
#define TRACE_PS2_RESET_KEYBOARD_ENABLED 1
#define TRACE_PS2_WRITE_KEYBOARD_ENABLED 1
#define TRACE_PS2_KEYBOARD_SET_TRANSLATION_ENABLED 1
#define TRACE_PS2_MOUSE_SEND_PACKET_ENABLED 1
#define TRACE_PS2_MOUSE_FAKE_EVENT_ENABLED 1
#define TRACE_PS2_WRITE_MOUSE_ENABLED 1
#define TRACE_PS2_KBD_RESET_ENABLED 1
#define TRACE_PS2_MOUSE_RESET_ENABLED 1
#define TRACE_PS2_KBD_INIT_ENABLED 1
#define TRACE_PS2_MOUSE_INIT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEVT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_KEVT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ_ENABLED 1
#define TRACE_HID_KBD_QUEUE_FULL_ENABLED 1
#define TRACE_VIRTIO_INPUT_QUEUE_FULL_ENABLED 1
#include "qemu/log.h"


static inline void trace_ps2_put_keycode(void * opaque, int keycode)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_PUT_KEYCODE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_put_keycode " "%p keycode %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , opaque, keycode);
        }
    }
}

static inline void trace_ps2_read_data(void * opaque)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_READ_DATA)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_read_data " "%p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , opaque);
        }
    }
}

static inline void trace_ps2_set_ledstate(void * s, int ledstate)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_SET_LEDSTATE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_set_ledstate " "%p ledstate %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , s, ledstate);
        }
    }
}

static inline void trace_ps2_reset_keyboard(void * s)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_RESET_KEYBOARD)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_reset_keyboard " "%p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , s);
        }
    }
}

static inline void trace_ps2_write_keyboard(void * opaque, int val)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_WRITE_KEYBOARD)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_write_keyboard " "%p val %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , opaque, val);
        }
    }
}

static inline void trace_ps2_keyboard_set_translation(void * opaque, int mode)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_KEYBOARD_SET_TRANSLATION)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_keyboard_set_translation " "%p mode %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , opaque, mode);
        }
    }
}

static inline void trace_ps2_mouse_send_packet(void * s, int dx1, int dy1, int dz1, int b)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_MOUSE_SEND_PACKET)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_mouse_send_packet " "%p x %d y %d z %d bs %#x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , s, dx1, dy1, dz1, b);
        }
    }
}

static inline void trace_ps2_mouse_fake_event(void * opaque)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_MOUSE_FAKE_EVENT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_mouse_fake_event " "%p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , opaque);
        }
    }
}

static inline void trace_ps2_write_mouse(void * opaque, int val)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_WRITE_MOUSE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_write_mouse " "%p val %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , opaque, val);
        }
    }
}

static inline void trace_ps2_kbd_reset(void * opaque)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_KBD_RESET)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_kbd_reset " "%p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , opaque);
        }
    }
}

static inline void trace_ps2_mouse_reset(void * opaque)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_MOUSE_RESET)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_mouse_reset " "%p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , opaque);
        }
    }
}

static inline void trace_ps2_kbd_init(void * s)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_KBD_INIT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_kbd_init " "%p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , s);
        }
    }
}

static inline void trace_ps2_mouse_init(void * s)
{
    if (true) {
        if (trace_event_get_state(TRACE_PS2_MOUSE_INIT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:ps2_mouse_init " "%p" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , s);
        }
    }
}

static inline void trace_milkymist_softusb_memory_read(uint32_t addr, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_SOFTUSB_MEMORY_READ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_softusb_memory_read " "addr %08x value %08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, value);
        }
    }
}

static inline void trace_milkymist_softusb_memory_write(uint32_t addr, uint32_t value)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_softusb_memory_write " "addr %08x value %08x" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , addr, value);
        }
    }
}

static inline void trace_milkymist_softusb_mevt(uint8_t m)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_SOFTUSB_MEVT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_softusb_mevt " "m %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , m);
        }
    }
}

static inline void trace_milkymist_softusb_kevt(uint8_t m)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_SOFTUSB_KEVT)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_softusb_kevt " "m %d" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          , m);
        }
    }
}

static inline void trace_milkymist_softusb_pulse_irq(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:milkymist_softusb_pulse_irq " "Pulse IRQ" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_hid_kbd_queue_full(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_HID_KBD_QUEUE_FULL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:hid_kbd_queue_full " "queue full" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}

static inline void trace_virtio_input_queue_full(void)
{
    if (true) {
        if (trace_event_get_state(TRACE_VIRTIO_INPUT_QUEUE_FULL)) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
            qemu_log_mask(LOG_TRACE, "%d@%zd.%06zd:virtio_input_queue_full " "queue full" "\n",
                          getpid(),
                          (size_t)_now.tv_sec, (size_t)_now.tv_usec
                          );
        }
    }
}
#endif /* TRACE_HW_INPUT_GENERATED_TRACERS_H */
